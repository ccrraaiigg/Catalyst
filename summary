Catalyst is a self-hosted Open Smalltalk virtual machine and object
memory, written in Smalltalk and decompiled to WASM GC for operation
in web browsers. It uses AI-assisted dynamic method translation to
optimize high-frequency code paths. Each Catalyst module can run
multiple concurrent systems, and uses this ability to provide
continuity of operation across class type changes. Catalyst leverages
JavaScript for finalization and host device driver access.

Development proceeds in several phases. In the first phase, a
handwritten interpreter supported running a single method which
evaluated (3 + 4). In the second phase, the interpreter supported (3
squared), which actually sends a message (for "squared") instead of
just running a bytecode (for "+"). In the third phase, the interpreter
translated frequently-used methods from bytecodes to WASM functions,
and ran those functions from a polymorphic inline cache instead of
performing interpretation. This translation could be done either by
transliterating the interpretation of particular bytecodes into WASM,
or by prompting an LLM for a WASM function after inferring the
method's overall algorithm. A contrived benchmark method was used
instead of "squared", which enabled speed comparisons between
interpretation, na√Øve translation, and LLM translation.

In the fourth phase, the handwritten interpreter will be generated by
decompiling an equivalent Smalltalk implementation, with the aid of
the Epigram compilation framework. The Smalltalk implementation is run
with SqueakJS, in the same webpage that runs the WASM GC
implementation. SqueakJS is thus positioned to serve as a livecoded
IDE for Catalyst development, for simulation, debugging, and
deployment.

In the fifth phase, we implement the ability to write object memory
snapshots and transfer them between running virtual machines, and to
transform them (for example, the object reference changes involved in
the "become" operation).

In the sixth phase, we support the Sista instruction set,
complementing the "V3 plus closures" set with which we started.

In the seventh phase, we further elaborate the system's adaptive
optimization capability.

In the eighth phase, we implement support for the Naiad module system.

In the ninth phase, we ensure compatibility with the current release
object memories of Squeak, Pharo, and Cuis.


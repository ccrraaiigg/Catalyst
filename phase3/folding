🐛 Debug mode enabled
Line 3: "(module"
Line 5: "(import "env" "reportResult" (func $reportResult (param i32)))"
Line 8: "(import "env" "translateMethod" (func $translateMethod (param eqref) (param eqref) (param eqref)))"
Line 11: "(import "env" "debugLog" (func $debugLog (param i32 i32 i32)))"
Line 13: "(rec ;; recursive (mutually referential) type definitions"
Line 15: "(type $ObjectArray (array (mut (ref null eq))))"
Line 18: "(type $ByteArray (array (mut i8)))"
Line 21: "(type $SqueakObject (sub (struct"
Line 22: "(field $class (mut (ref null $Class)))"
Line 23: "(field $identityHash (mut i32))"
Line 24: "(field $format (mut i32))"
Line 25: "(field $size (mut i32))"
Line 26: "(field $nextObject (mut (ref null $SqueakObject)))"
Line 27: ")))"
Line 30: "(type $VariableObject (sub $SqueakObject (struct"
Line 31: "(field $class (mut (ref null $Class)))"
Line 32: "(field $identityHash (mut i32))"
Line 33: "(field $format (mut i32))"
Line 34: "(field $size (mut i32))"
Line 35: "(field $nextObject (mut (ref null $SqueakObject)))"
Line 36: "(field $slots (mut (ref $ObjectArray)))"
Line 37: ")))"
Line 40: "(type $Symbol (sub $VariableObject (struct"
Line 41: "(field $class (mut (ref null $Class)))"
Line 42: "(field $identityHash (mut i32))"
Line 43: "(field $format (mut i32))"
Line 44: "(field $size (mut i32))"
Line 45: "(field $nextObject (mut (ref null $SqueakObject)))"
Line 46: "(field $slots (mut (ref $ObjectArray)))"
Line 47: "(field $bytes (ref null $ByteArray))"
Line 48: ")))"
Line 51: "(type $Class (sub $VariableObject (struct"
Line 52: "(field $class (mut (ref null $Class)))"
Line 53: "(field $identityHash (mut i32))"
Line 54: "(field $format (mut i32))"
Line 55: "(field $size (mut i32))"
Line 56: "(field $nextObject (mut (ref null $SqueakObject)))"
Line 57: "(field $slots (mut (ref $ObjectArray)))"
Line 58: "(field $superclass (mut (ref null $Class)))"
Line 59: "(field $methodDictionary (mut (ref $Dictionary)))"
Line 60: "(field $instanceVariableNames (mut (ref $ObjectArray)))"
Line 61: "(field $name (mut (ref $Symbol)))"
Line 62: "(field $instanceSize (mut i32))"
Line 63: ")))"
Line 66: "(type $Dictionary (sub $VariableObject (struct"
Line 67: "(field $class (mut (ref null $Class)))"
Line 68: "(field $identityHash (mut i32))"
Line 69: "(field $format (mut i32))"
Line 70: "(field $size (mut i32))"
Line 71: "(field $nextObject (mut (ref null $SqueakObject)))"
Line 72: "(field $slots (mut (ref $ObjectArray)))"
Line 73: "(field $keys (ref $ObjectArray))"
Line 74: "(field $values (ref $ObjectArray))"
Line 75: "(field $count (mut i32))"
Line 76: ")))"
Line 79: "(type $CompiledMethod (sub $VariableObject (struct"
Line 80: "(field $class (mut (ref null $Class)))"
Line 81: "(field $identityHash (mut i32))"
Line 82: "(field $format (mut i32))"
Line 83: "(field $size (mut i32))"
Line 84: "(field $nextObject (mut (ref null $SqueakObject)))"
Line 85: "(field $slots (mut (ref $ObjectArray)))"
Line 86: "(field $header i32)"
Line 87: "(field $bytecodes (ref null $ByteArray))"
Line 88: "(field $invocationCount (mut i32))"
Line 90: "(field $functionIndex (mut i32))"
Line 91: "(field $translationThreshold i32)"
Line 93: "(field $isInstalled (mut i32))"
Line 94: ")))"
Line 97: "(type $Context (sub $VariableObject (struct"
Line 98: "(field $class (mut (ref null $Class)))"
Line 99: "(field $identityHash (mut i32))"
Line 100: "(field $format (mut i32))"
Line 101: "(field $size (mut i32))"
Line 102: "(field $nextObject (mut (ref null $SqueakObject)))"
Line 103: "(field $slots (mut (ref $ObjectArray)))"
Line 104: "(field $sender (mut (ref null $Context)))"
Line 105: "(field $pc (mut i32))"
Line 106: "(field $sp (mut i32))"
Line 107: "(field $method (mut (ref null $CompiledMethod)))"
Line 108: "(field $receiver (mut (ref null eq)))"
Line 109: "(field $args (mut (ref $ObjectArray)))"
Line 110: "(field $temps (mut (ref $ObjectArray)))"
Line 111: "(field $stack (mut (ref $ObjectArray)))"
Line 112: ")))"
Line 115: "(type $PICEntry (struct"
Line 116: "(field $selector (mut (ref null eq)))"
Line 117: "(field $receiverClass (mut (ref null $Class)))"
Line 118: "(field $method (mut (ref null $CompiledMethod)))"
Line 119: "(field $hitCount (mut i32))"
Line 120: "))"
Line 123: "(type $jit_func_type (func (param eqref) (result i32)))"
Line 126: "(type $VirtualMachine (struct"
Line 127: "(field $activeContext (mut (ref $Context)))"
Line 128: "(field $jitEnabled (mut i32))"
Line 129: "(field $methodCache (mut (ref $ObjectArray)))"
Line 130: "(field $functionTableBaseIndex (mut i32))"
Line 133: "(field $nextIdentityHash (mut i32))"
Line 134: "(field $firstObject (mut (ref $SqueakObject)))"
Line 135: "(field $lastObject (mut (ref $SqueakObject))))))"
Line 143: "(global $objectClass (mut (ref null $Class)) (ref.null $Class))"
Line 144: "(global $classClass (mut (ref null $Class)) (ref.null $Class))"
Line 145: "(global $methodClass (mut (ref null $Class)) (ref.null $Class))"
Line 146: "(global $contextClass (mut (ref null $Class)) (ref.null $Class))"
Line 147: "(global $symbolClass (mut (ref null $Class)) (ref.null $Class))"
Line 148: "(global $smallIntegerClass (mut (ref null $Class)) (ref.null $Class))"
Line 149: "(global $mainMethod (mut (ref null $CompiledMethod)) (ref.null $CompiledMethod))"
Line 152: "(global $nilObject (mut (ref null eq)) (ref.null eq))"
Line 153: "(global $trueObject (mut (ref null eq)) (ref.null eq))"
Line 154: "(global $falseObject (mut (ref null eq)) (ref.null eq))"
Line 157: "(global $workloadSelector (mut (ref null eq)) (ref.null eq))"
Line 161: "(global $translationThreshold (mut i32) (i32.const 1000))"
Line 162: "(global $methodCacheSize (mut i32) (i32.const 256))"
Line 165: "(table $functionTable (export "functionTable") 100 funcref)"
Line 168: "(memory (export "memory") 1)"
Line 171: "(func (export "compiledMethodBytecodes")"
Line 172: "(param $vm (ref $VirtualMachine))"
Line 173: "(param (ref null $CompiledMethod))"
Line 174: "(result (ref null $ByteArray))"
Line 176: "local.get 0"
Line 177: "struct.get $CompiledMethod $bytecodes)"
Line 179: "(func (export "methodWithID")"
Line 180: "(param $vm (ref $VirtualMachine))"
Line 181: "(param i32)"
Line 182: "(result (ref null $CompiledMethod))"
Line 184: "(local $targetHash i32)"
Line 185: "(local $currentObject (ref null $SqueakObject))"
Line 186: "(local $currentHash i32)"
Line 188: "local.get 0                ;; Stack: [id]"
Line 189: "local.set $targetHash      ;; Stack: []"
Line 192: "local.get $vm"
Line 193: "struct.get $VirtualMachine $firstObject    ;; Stack: [firstObject]"
Line 194: "local.set $currentObject   ;; Stack: []"
Line 197: "loop $search_loop"
  -> Folding LOOP block starting at line 197
  -> LOOP folded, consumed 34 lines
Line 232: "ref.null $CompiledMethod   ;; Stack: [null]"
Line 233: ")"
Line 235: "(func (export "setMethodFunctionIndex")"
Line 236: "(param (ref null $CompiledMethod))"
Line 237: "(param i32)"
Line 239: "local.get 0"
Line 240: "local.get 1"
Line 241: "struct.set $CompiledMethod $functionIndex"
Line 242: ")"
Line 244: "(func (export "onContextPush")"
Line 245: "(param $context eqref)"
Line 246: "(param $value eqref)"
Line 248: "local.get $context"
Line 249: "ref.cast (ref null $Context)"
Line 250: "local.get $value"
Line 251: "call $pushOnStack)"
Line 253: "(func (export "popFromContext")"
Line 254: "(param $context eqref)"
Line 255: "(result eqref)"
Line 257: "local.get $context"
Line 258: "ref.cast (ref null $Context)"
Line 259: "call $popFromStack)"
Line 261: "(func (export "valueOfSmallInteger")"
Line 262: "(param $obj (ref null eq))"
Line 263: "(result i32)"
Line 265: "local.get $obj"
Line 266: "call $valueOfSmallInteger)"
Line 268: "(func (export "smallIntegerForValue")"
Line 269: "(param $value i32)"
Line 270: "(result eqref)"
Line 272: "local.get $value"
Line 273: "call $smallIntegerForValue)"
Line 275: "(func (export "classOfObject")"
Line 276: "(param $obj eqref)"
Line 277: "(result eqref)"
Line 279: "local.get $obj"
Line 280: "call $classOfObject)"
Line 282: "(func (export "lookupInCache")"
Line 283: "(param $selector eqref)"
Line 284: "(param $receiverClass eqref)"
Line 285: "(result eqref)"
Line 287: "local.get $selector"
Line 288: "local.get $receiverClass"
Line 289: "ref.cast (ref null $Class)"
Line 290: "call $lookupInCache)"
Line 292: "(func (export "lookupMethod") (param $receiver eqref) (param $selector eqref) (result eqref)"
Line 293: "local.get $receiver"
Line 294: "local.get $selector"
Line 295: "call $lookupMethod)"
Line 297: "(func (export "storeInCache") (param $selector eqref) (param $receiverClass eqref) (param $method eqref)"
Line 298: "local.get $method"
Line 299: "ref.cast (ref null $CompiledMethod)"
Line 300: "ref.is_null"
Line 301: "if"
  -> Folding IF block starting at line 301
  -> IF folded, consumed 3 lines
Line 304: "local.get $selector"
Line 305: "local.get $receiverClass"
Line 306: "ref.cast (ref null $Class)"
Line 307: "local.get $method"
Line 308: "ref.cast (ref null $CompiledMethod)"
Line 309: "ref.as_non_null"
Line 310: "call $storeInCache)"
Line 312: "(func (export "createMethodContext") (param $receiver eqref) (param $method eqref) (param $selector eqref) (result eqref)"
Line 313: "local.get $method"
Line 314: "ref.cast (ref null $CompiledMethod)"
Line 315: "ref.is_null"
Line 316: "if"
  -> Folding IF block starting at line 316
  -> IF folded, consumed 4 lines
Line 320: "local.get $receiver"
Line 321: "local.get $method"
Line 322: "ref.cast (ref null $CompiledMethod)"
Line 323: "ref.as_non_null"
Line 324: "local.get $selector"
Line 325: "call $createMethodContext)"
Line 327: "(func (export "interpretBytecode") (param $context eqref) (param $bytecode i32) (result i32)"
Line 328: "local.get $context"
Line 329: "ref.cast (ref null $Context)"
Line 330: "local.get $bytecode"
Line 331: "call $interpretBytecode)"
Line 333: "(func (export "getActiveContext") (param $vm eqref) (result eqref)"
Line 334: "local.get $vm"
Line 335: "struct.get $VirtualMachine $activeContext)"
Line 337: "(func (export "getContextReceiver") (param $context eqref) (result eqref)"
Line 338: "local.get $context"
Line 339: "ref.cast (ref null $Context)"
Line 340: "struct.get $Context $receiver)"
Line 342: "(func (export "getCompiledMethodSlots") (param $method eqref) (result eqref)"
Line 343: "local.get $method"
Line 344: "ref.cast (ref $CompiledMethod)"
Line 345: "struct.get $CompiledMethod $slots)"
Line 347: "(func $contextLiteralAt"
Line 348: "(param $context (ref $Context))"
Line 349: "(param $index i32)"
Line 350: "(result eqref)"
Line 352: "local.get $context"
Line 353: "ref.cast (ref null $Context)"
Line 354: "struct.get $Context $method"
Line 355: "struct.get $CompiledMethod $slots"
Line 356: "ref.cast (ref null $ObjectArray)"
Line 357: "local.get $index"
Line 358: "call $objectArrayAt)"
Line 360: "(func (export "getContextLiteral") (param $context eqref) (param $index i32) (result eqref)"
Line 361: "local.get $context"
Line 362: "ref.cast (ref $Context)"
Line 363: "local.get $index"
Line 364: "call $contextLiteralAt)"
Line 366: "(func (export "getContextMethod") (param $context eqref) (result eqref)"
Line 367: "local.get $context"
Line 368: "ref.cast (ref null $Context)"
Line 369: "struct.get $Context $method)"
Line 371: "(func (export "objectArrayAt") (param $array eqref) (param $index i32) (result eqref)"
Line 372: "local.get $array"
Line 373: "ref.cast (ref null $ObjectArray)"
Line 374: "local.get $index"
Line 375: "call $objectArrayAt)"
Line 377: "(func (export "getObjectArrayLength") (param $array eqref) (result i32)"
Line 378: "local.get $array"
Line 379: "ref.cast (ref null $ObjectArray)"
Line 380: "call $array_len_object)"
Line 382: "(global $byteArrayCopyPtr (mut i32) (i32.const 1024)) ;; Start of copy buffer"
Line 384: "(func (export "copyByteArrayToMemory") (param (ref null $ByteArray)) (result i32)"
Line 385: "(local $len i32)"
Line 386: "(local $i i32)"
Line 387: "local.get 0"
Line 388: "ref.is_null"
Line 389: "if"
  -> Folding IF block starting at line 389
  -> IF folded, consumed 4 lines
Line 393: "local.get 0"
Line 394: "ref.as_non_null"
Line 395: "array.len"
Line 396: "local.set $len"
Line 397: "i32.const 0"
Line 398: "local.set $i"
Line 399: "loop $copy"
  -> Folding LOOP block starting at line 399
  -> LOOP folded, consumed 22 lines
Line 421: "i32.const 0"
Line 422: ")"
Line 424: "(func (export "getByteArrayLen") (param (ref null $ByteArray)) (result i32)"
Line 425: "local.get 0"
Line 426: "ref.is_null"
Line 427: "if"
  -> Folding IF block starting at line 427
  -> IF folded, consumed 4 lines
Line 431: "local.get 0"
Line 432: "ref.as_non_null"
Line 433: "array.len)"
Line 436: "(func $array_len_byte"
Line 437: "(param $array (ref null $ByteArray))"
Line 438: "(result i32)"
Line 439: "local.get $array"
Line 440: "ref.is_null"
Line 441: "if"
  -> Folding IF block starting at line 441
  -> IF folded, consumed 4 lines
Line 445: "local.get $array"
Line 446: "ref.as_non_null"
Line 447: "array.len"
Line 448: ") ;; (func $array_len_byte"
Line 450: "(func $array_get_byte"
Line 451: "(param $array (ref null $ByteArray))"
Line 452: "(param $index i32)"
Line 453: "(result i32)"
Line 454: "(local $length i32)"
Line 457: "local.get $array"
Line 458: "ref.is_null"
Line 459: "if"
  -> Folding IF block starting at line 459
  -> IF folded, consumed 4 lines
Line 465: "local.get $array"
Line 466: "ref.as_non_null"
Line 467: "array.len"
Line 468: "local.set $length"
Line 471: "local.get $index"
Line 472: "i32.const 0"
Line 473: "i32.lt_s"
Line 474: "if"
  -> Folding IF block starting at line 474
  -> IF folded, consumed 4 lines
Line 479: "local.get $index"
Line 480: "local.get $length"
Line 481: "i32.ge_u"
Line 482: "if"
  -> Folding IF block starting at line 482
  -> IF folded, consumed 4 lines
Line 488: "local.get $array"
Line 489: "local.get $index"
Line 490: "array.get_u $ByteArray"
Line 491: ") ;; (func $array_get_byte"
Line 494: "(func $array_len_object"
Line 495: "(param $array (ref null $ObjectArray))"
Line 496: "(result i32)"
Line 497: "local.get $array"
Line 498: "ref.is_null"
Line 499: "if"
  -> Folding IF block starting at line 499
  -> IF folded, consumed 4 lines
Line 503: "local.get $array"
Line 504: "ref.as_non_null"
Line 505: "array.len"
Line 506: ") ;; (func $array_len_object"
Line 508: "(func $objectArrayAt"
Line 509: "(param $array (ref null $ObjectArray))"
Line 510: "(param $index i32)"
Line 511: "(result (ref null eq))"
Line 512: "(local $length i32)"
Line 515: "local.get $array"
Line 516: "ref.is_null"
Line 517: "if"
  -> Folding IF block starting at line 517
  -> IF folded, consumed 4 lines
Line 523: "local.get $array"
Line 524: "ref.as_non_null"
Line 525: "array.len"
Line 526: "local.set $length"
Line 529: "local.get $index"
Line 530: "i32.const 0"
Line 531: "i32.lt_s"
Line 532: "if"
  -> Folding IF block starting at line 532
  -> IF folded, consumed 4 lines
Line 537: "local.get $index"
Line 538: "local.get $length"
Line 539: "i32.ge_u"
Line 540: "if"
  -> Folding IF block starting at line 540
  -> IF folded, consumed 4 lines
Line 546: "local.get $array"
Line 547: "local.get $index"
Line 548: "array.get $ObjectArray"
Line 549: ") ;; (func $objectArrayAt"
Line 551: "(func $isSmallInteger"
Line 552: "(param $obj (ref null eq))"
Line 553: "(result i32)"
Line 554: "local.get $obj"
Line 555: "ref.test (ref i31)"
Line 556: ") ;; (func $isSmallInteger"
Line 558: "(func $smallIntegerValue"
Line 559: "(param $obj (ref null eq))"
Line 560: "(result i32)"
Line 561: "local.get $obj"
Line 562: "ref.cast (ref i31)"
Line 563: "i31.get_s"
Line 564: ") ;; (func $smallIntegerValue"
Line 567: "(func $nextIdentityHash (param $vm (ref $VirtualMachine)) (result i32)"
Line 568: "local.get $vm"
Line 569: "struct.get $VirtualMachine $nextIdentityHash"
Line 570: "i32.const 1"
Line 571: "i32.add"
Line 572: "local.get $vm"
Line 573: "struct.set $VirtualMachine $nextIdentityHash"
Line 574: "local.get $vm"
Line 575: "struct.get $VirtualMachine $nextIdentityHash"
Line 576: ") ;; (func $nextIdentityHash (result i32)"
Line 579: "(func $pushOnStack"
Line 580: "(param $context (ref null $Context))"
Line 581: "(param $value eqref)"
Line 582: "(local $stack (ref $ObjectArray))"
Line 583: "(local $sp i32)"
Line 585: "local.get $context"
Line 586: "struct.get $Context $stack"
Line 587: "local.set $stack"
Line 589: "local.get $context"
Line 590: "struct.get $Context $sp"
Line 591: "local.set $sp"
Line 593: "local.get $sp"
Line 594: "local.get $stack"
Line 595: "array.len"
Line 596: "i32.ge_u"
Line 597: "if"
  -> Folding IF block starting at line 597
  -> IF folded, consumed 3 lines
Line 601: "local.get $stack"
Line 602: "local.get $sp"
Line 603: "local.get $value"
Line 604: "array.set $ObjectArray"
Line 606: "local.get $context"
Line 607: "local.get $sp"
Line 608: "i32.const 1"
Line 609: "i32.add"
Line 610: "struct.set $Context $sp"
Line 611: "return"
Line 612: ") ;; (func $pushOnStack"
Line 614: "(func $popFromStack"
Line 615: "(param $context (ref null $Context))"
Line 616: "(result (ref null eq))"
Line 617: "(local $stack (ref $ObjectArray))"
Line 618: "(local $sp i32)"
Line 621: "local.get $context"
Line 622: "struct.get $Context $stack"
Line 623: "local.set $stack"
Line 625: "local.get $context"
Line 626: "struct.get $Context $sp"
Line 627: "local.set $sp"
Line 630: "local.get $sp"
Line 631: "i32.const 0"
Line 632: "i32.le_u"
Line 633: "if"
  -> Folding IF block starting at line 633
  -> IF folded, consumed 4 lines
Line 639: "local.get $context"
Line 640: "local.get $sp"
Line 641: "i32.const 1"
Line 642: "i32.sub"
Line 643: "struct.set $Context $sp"
Line 646: "local.get $stack"
Line 647: "local.get $sp"
Line 648: "i32.const 1"
Line 649: "i32.sub"
Line 650: "array.get $ObjectArray"
Line 651: "return"
Line 652: ") ;; (func $popFromStack"
Line 654: "(func $topOfStack"
Line 655: "(param $context (ref null $Context))"
Line 656: "(result (ref null eq))"
Line 657: "(local $stack (ref $ObjectArray))"
Line 658: "(local $sp i32)"
Line 661: "local.get $context"
Line 662: "struct.get $Context $stack"
Line 663: "local.set $stack"
Line 665: "local.get $context"
Line 666: "struct.get $Context $sp"
Line 667: "local.set $sp"
Line 670: "local.get $sp"
Line 671: "i32.const 0"
Line 672: "i32.le_u"
Line 673: "if"
  -> Folding IF block starting at line 673
  -> IF folded, consumed 4 lines
Line 679: "local.get $stack"
Line 680: "local.get $sp"
Line 681: "i32.const 1"
Line 682: "i32.sub"
Line 683: "array.get $ObjectArray"
Line 684: "return"
Line 685: ") ;; (func $topOfStack"
Line 688: "(func $classOfObject (param $obj (ref null eq)) (result (ref null $Class))"
Line 689: "local.get $obj"
Line 690: "ref.test (ref i31)"
Line 691: "if (result (ref null $Class))"
  -> Folding IF block starting at line 691
  -> IF folded, consumed 9 lines
Line 700: ") ;; if (result (ref null $Class))"
Line 702: "(func $lookupMethod"
Line 703: "(param $receiver (ref null eq))"
Line 704: "(param $selector (ref null eq))"
Line 705: "(result (ref null $CompiledMethod))"
Line 706: "(local $class (ref null $Class))"
Line 707: "(local $currentClass (ref null $Class))"
Line 708: "(local $methodDictionary (ref null $Dictionary))"
Line 709: "(local $keys (ref null $ObjectArray))"
Line 710: "(local $values (ref null $ObjectArray))"
Line 711: "(local $count i32)"
Line 712: "(local $i i32)"
Line 713: "(local $key (ref null eq))"
Line 716: "local.get $receiver"
Line 717: "call $classOfObject"
Line 718: "local.set $currentClass"
Line 721: "loop $hierarchy_loop"
  -> Folding LOOP block starting at line 721
  -> LOOP folded, consumed 105 lines
Line 827: "ref.null $CompiledMethod"
Line 828: "return"
Line 829: ")"
Line 832: "(func $lookupInCache"
Line 833: "(param $vm (ref $VirtualMachine))"
Line 834: "(param $selector (ref null eq))"
Line 835: "(param $receiverClass (ref null $Class))"
Line 836: "(result (ref null $CompiledMethod))"
Line 837: "(local $cache (ref null $ObjectArray))"
Line 838: "(local $cacheSize i32)"
Line 839: "(local $hash i32)"
Line 840: "(local $index i32)"
Line 841: "(local $entry (ref null $PICEntry))"
Line 842: "(local $probeLimit i32)"
Line 845: "local.get $vm"
Line 846: "struct.get $VirtualMachine $methodCache"
Line 847: "local.tee $cache"
Line 848: "ref.is_null"
Line 849: "if"
  -> Folding IF block starting at line 849
  -> IF folded, consumed 4 lines
Line 855: "local.get $selector"
Line 856: "ref.cast (ref $SqueakObject)"
Line 857: "struct.get $SqueakObject $identityHash"
Line 859: "local.get $receiverClass"
Line 860: "ref.as_non_null"
Line 861: "struct.get $Class $identityHash"
Line 862: "i32.add"
Line 864: "global.get $methodCacheSize"
Line 865: "i32.rem_u"
Line 866: "local.set $index"
Line 869: "i32.const 8  ;; Max probe distance"
Line 870: "local.set $probeLimit"
Line 872: "loop $probe_loop"
  -> Folding LOOP block starting at line 872
  -> LOOP folded, consumed 66 lines
Line 939: "ref.null $CompiledMethod"
Line 940: "return"
Line 941: ")"
Line 944: "(func $storeInCache"
Line 945: "(param $vm (ref $VirtualMachine))"
Line 946: "(param $selector (ref null eq))"
Line 947: "(param $receiverClass (ref null $Class))"
Line 948: "(param $method (ref $CompiledMethod))"
Line 949: "(local $cache (ref null $ObjectArray))"
Line 950: "(local $index i32)"
Line 951: "(local $entry (ref $PICEntry))"
Line 954: "local.get $vm"
Line 955: "struct.get $VirtualMachine $methodCache"
Line 956: "local.tee $cache"
Line 957: "ref.is_null"
Line 958: "if"
  -> Folding IF block starting at line 958
  -> IF folded, consumed 3 lines
Line 963: "local.get $selector"
Line 964: "ref.cast (ref $SqueakObject)"
Line 965: "struct.get $SqueakObject $identityHash"
Line 967: "local.get $receiverClass"
Line 968: "ref.as_non_null"
Line 969: "struct.get $Class $identityHash"
Line 970: "i32.add"
Line 972: "global.get $methodCacheSize"
Line 973: "i32.rem_u"
Line 974: "local.set $index"
Line 977: "local.get $selector"
Line 978: "local.get $receiverClass"
Line 979: "local.get $method"
Line 980: "i32.const 1  ;; Initial hit count"
Line 981: "struct.new $PICEntry"
Line 982: "local.set $entry"
Line 985: "local.get $cache"
Line 986: "ref.as_non_null"
Line 987: "local.get $index"
Line 988: "local.get $entry"
Line 989: "array.set $ObjectArray"
Line 990: ") ;; (func $storeInCache"
Line 993: "(func $createMethodContext"
Line 994: "(param $vm (ref $VirtualMachine))"
Line 995: "(param $receiver eqref)"
Line 996: "(param $method (ref $CompiledMethod))"
Line 997: "(param $selector eqref)"
Line 998: "(result (ref null $Context))"
Line 999: "(local $stack (ref $ObjectArray))"
Line 1000: "(local $slots (ref $ObjectArray))"
Line 1001: "(local $args (ref $ObjectArray))"
Line 1002: "(local $temps (ref $ObjectArray))"
Line 1005: "ref.null eq"
Line 1006: "i32.const 20"
Line 1007: "array.new $ObjectArray"
Line 1008: "local.set $stack"
Line 1011: "ref.null eq"
Line 1012: "i32.const 0"
Line 1013: "array.new $ObjectArray"
Line 1014: "local.set $slots"
Line 1015: "ref.null eq"
Line 1016: "i32.const 0"
Line 1017: "array.new $ObjectArray"
Line 1018: "local.set $args"
Line 1019: "ref.null eq"
Line 1020: "i32.const 0"
Line 1021: "array.new $ObjectArray"
Line 1022: "local.set $temps"
Line 1025: "global.get $objectClass ;; class (Context is-a Object for now)"
Line 1026: "call $nextIdentityHash"
Line 1027: "i32.const 14         ;; format (MethodContext)"
Line 1028: "i32.const 14         ;; size"
Line 1029: "ref.null $SqueakObject ;; nextObject"
Line 1030: "local.get $slots     ;; slots (non-nullable)"
Line 1031: "local.get $vm"
Line 1032: "struct.get $VirtualMachine $activeContext  ;; sender (current context)"
Line 1033: "i32.const 0          ;; pc"
Line 1034: "i32.const 0          ;; sp"
Line 1035: "local.get $method    ;; method"
Line 1036: "local.get $receiver  ;; receiver"
Line 1037: "local.get $args      ;; args (non-nullable)"
Line 1038: "local.get $temps     ;; temps (non-nullable)"
Line 1039: "local.get $stack     ;; stack (non-nullable)"
Line 1040: "struct.new $Context"
Line 1041: ") ;; (func $createMethodContext"
Line 1044: "(func $smallIntegerForValue (param $value i32) (result (ref i31))"
Line 1045: "local.get $value"
Line 1046: "ref.i31"
Line 1047: ") ;; (func $smallIntegerForValue (param $value i32) (result (ref i31))"
Line 1049: "(func $valueOfSmallInteger (param $obj (ref null eq)) (result i32)"
Line 1050: "local.get $obj"
Line 1051: "ref.test (ref i31)"
Line 1052: "if (result i32)"
  -> Folding IF block starting at line 1052
  -> IF folded, consumed 8 lines
Line 1060: ") ;; if (result i32)"
Line 1063: "(func $isTranslated (param $method (ref $CompiledMethod)) (result i32)"
Line 1064: "local.get $method"
Line 1065: "struct.get $CompiledMethod $functionIndex"
Line 1066: "i32.const 0"
Line 1067: "i32.gt_u  ;; Check if > 0 (since we start at index 1)"
Line 1068: ") ;; (func $isTranslated (param $method (ref $CompiledMethod)) (result i32)"
Line 1071: "(func $executeTranslatedMethod"
Line 1072: "(param $context (ref null $Context))"
Line 1073: "(param $funcIndex i32)"
Line 1074: "(result i32)"
Line 1077: "local.get $context"
Line 1078: "local.get $funcIndex"
Line 1079: "call_indirect (param eqref) (result i32)"
Line 1080: ") ;; (func $executeTranslatedMethod"
Line 1083: "(func $triggerMethodTranslation (param $method (ref $CompiledMethod))"
Line 1084: "(local $bytecodes (ref null $ByteArray))"
Line 1085: "(local $bytecodeLen i32)"
Line 1086: "(local $functionIndexIndex i32)"
Line 1087: "(local $memoryOffset i32)"
Line 1090: "local.get $method"
Line 1091: "struct.get $CompiledMethod $bytecodes"
Line 1092: "local.tee $bytecodes"
Line 1093: "ref.is_null"
Line 1094: "if"
  -> Folding IF block starting at line 1094
  -> IF folded, consumed 3 lines
Line 1099: "local.get $bytecodes"
Line 1100: "ref.as_non_null"
Line 1101: "array.len"
Line 1102: "local.set $bytecodeLen"
Line 1105: "local.get $method"
Line 1107: "call $translateMethod"
Line 1108: ") ;; (func $triggerMethodTranslation (param $method (ref $CompiledMethod))"
Line 1111: "(func $handleMethodReturn (param $vm (ref $VirtualMachine)) (param $context (ref null $Context)) (result (ref null eq))"
Line 1112: "(local $sender (ref null $Context))"
Line 1113: "(local $result (ref null eq))"
Line 1116: "local.get $context"
Line 1117: "call $topOfStack"
Line 1118: "local.set $result"
Line 1121: "local.get $context"
Line 1122: "struct.get $Context $sender"
Line 1123: "local.tee $sender"
Line 1124: "ref.is_null"
Line 1125: "i32.eqz ;; not"
Line 1126: "if"
  -> Folding IF block starting at line 1126
  -> IF folded, consumed 18 lines
Line 1146: "local.get $sender"
Line 1147: "ref.is_null"
Line 1148: "if"
  -> Folding IF block starting at line 1148
  -> IF folded, consumed 10 lines
Line 1159: "local.get $result"
Line 1160: ") ;; if"
Line 1163: "(func $initialize (export "initialize") (result (ref $VirtualMachine))"
Line 1164: "(local $vm (ref $VirtualMachine))"
Line 1169: "struct.new $VirtualMachine"
Line 1170: "local.set $vm"
Line 1172: "local.get $vm"
Line 1173: "call $createMinimalBootstrap"
Line 1174: ") ;; (func $initialize (export "initialize") (result i32)"
Line 1177: "(func $createMinimalBootstrap (result i32)"
Line 1178: "(local $vm (ref $VirtualMachine))"
Line 1179: "(local $workloadMethod (ref null $CompiledMethod))"
Line 1180: "(local $mainMethod (ref null $CompiledMethod))"
Line 1181: "(local $mainBytecodes (ref null $ByteArray))"
Line 1182: "(local $workloadBytecodes (ref null $ByteArray))"
Line 1183: "(local $workloadSelector (ref null $Symbol))"
Line 1184: "(local $methodDictionary (ref null $Dictionary))"
Line 1185: "(local $newObject (ref null $SqueakObject))"
Line 1186: "(local $slots (ref $ObjectArray))"
Line 1187: "(local $keys (ref $ObjectArray))"
Line 1188: "(local $values (ref $ObjectArray))"
Line 1189: "(local $emptyDict (ref $Dictionary))"
Line 1190: "(local $emptySymbol (ref $Symbol))"
Line 1191: "(local $emptyInstVarNames (ref $ObjectArray))"
Line 1192: "(local $workloadSlots (ref $ObjectArray))"
Line 1195: "ref.null eq"
Line 1196: "global.get $methodCacheSize"
Line 1197: "array.new $ObjectArray"
Line 1198: "ref.as_non_null"
Line 1199: "local.get $vm"
Line 1200: "struct.set $VirtualMachine $methodCache"
Line 1204: "global.get $objectClass ;; class (ref null $Class)"
Line 1205: "call $nextIdentityHash"
Line 1206: "i32.const 2         ;; format (variable object)"
Line 1207: "i32.const 9         ;; size"
Line 1208: "ref.null $SqueakObject ;; nextObject (ref null $SqueakObject)"
Line 1209: "ref.null eq"
Line 1210: "i32.const 0"
Line 1211: "array.new $ObjectArray"
Line 1212: "ref.as_non_null      ;; $slots (non-nullable)"
Line 1213: "ref.null eq"
Line 1214: "i32.const 0"
Line 1215: "array.new $ObjectArray"
Line 1216: "ref.null eq"
Line 1217: "i32.const 0"
Line 1218: "array.new $ObjectArray"
Line 1219: "i32.const 0         ;; count"
Line 1220: "struct.new $Dictionary"
Line 1221: "local.set $emptyDict"
Line 1224: "global.get $objectClass ;; class (ref null $Class)"
Line 1225: "call $nextIdentityHash"
Line 1226: "i32.const 8         ;; format (byte object)"
Line 1227: "i32.const 7         ;; size"
Line 1228: "ref.null $SqueakObject ;; nextObject (ref null $SqueakObject)"
Line 1229: "ref.null eq"
Line 1230: "i32.const 0"
Line 1231: "array.new $ObjectArray"
Line 1232: "ref.as_non_null"
Line 1233: "ref.null $ByteArray"
Line 1234: "struct.new $Symbol"
Line 1235: "local.set $emptySymbol"
Line 1238: "ref.null eq"
Line 1239: "i32.const 0"
Line 1240: "array.new $ObjectArray"
Line 1241: "ref.as_non_null"
Line 1242: "local.set $emptyInstVarNames"
Line 1245: "ref.null $Class     ;; class (will be set to itself)"
Line 1246: "call $nextIdentityHash"
Line 1247: "i32.const 1         ;; format (regular object)"
Line 1248: "i32.const 11        ;; size"
Line 1249: "ref.null $SqueakObject ;; nextObject (ref null $SqueakObject)"
Line 1250: "ref.null eq"
Line 1251: "i32.const 0"
Line 1252: "array.new $ObjectArray"
Line 1253: "ref.as_non_null      ;; $slots (non-nullable)"
Line 1254: "ref.null $Class     ;; superclass (nullable)"
Line 1255: "local.get $emptyDict ;; methodDictionary (non-nullable)"
Line 1256: "local.get $emptyInstVarNames ;; instanceVariableNames (non-nullable $ObjectArray)"
Line 1257: "local.get $emptySymbol ;; name (non-nullable)"
Line 1258: "i32.const 0         ;; instanceSize"
Line 1259: "struct.new $Class"
Line 1260: "local.set $newObject"
Line 1261: "local.get $newObject"
Line 1262: "ref.cast (ref null $Class)"
Line 1263: "global.set $classClass"
Line 1264: "global.get $classClass"
Line 1266: "local.get $newObject"
Line 1267: "ref.cast (ref null $Class)"
Line 1268: "struct.set $Class $class"
Line 1270: "local.get $newObject"
Line 1271: "local.get $vm"
Line 1272: "struct.set $VirtualMachine $firstObject"
Line 1273: "local.get $newObject"
Line 1274: "local.get $vm"
Line 1275: "struct.set $VirtualMachine $lastObject"
Line 1278: "global.get $classClass ;; class (ref null $Class)"
Line 1279: "call $nextIdentityHash"
Line 1280: "i32.const 1         ;; format"
Line 1281: "i32.const 11        ;; size"
Line 1282: "ref.null $SqueakObject ;; nextObject (ref null $SqueakObject)"
Line 1283: "ref.null eq"
Line 1284: "i32.const 0"
Line 1285: "array.new $ObjectArray"
Line 1286: "ref.as_non_null      ;; $slots (non-nullable)"
Line 1287: "ref.null $Class     ;; superclass (ref null $Class)"
Line 1288: "local.get $emptyDict ;; methodDictionary (non-nullable)"
Line 1289: "local.get $emptyInstVarNames ;; instanceVariableNames (non-nullable $ObjectArray)"
Line 1290: "local.get $emptySymbol ;; name (non-nullable)"
Line 1291: "i32.const 0         ;; instanceSize"
Line 1292: "struct.new $Class"
Line 1293: "local.set $newObject"
Line 1295: "local.get $vm"
Line 1296: "struct.get $VirtualMachine $lastObject"
Line 1297: "local.get $newObject"
Line 1298: "struct.set $SqueakObject $nextObject"
Line 1299: "local.get $newObject"
Line 1300: "local.get $vm"
Line 1301: "struct.set $VirtualMachine $lastObject"
Line 1302: "local.get $newObject"
Line 1303: "ref.cast (ref null $Class)"
Line 1304: "global.set $objectClass"
Line 1307: "global.get $classClass ;; class (ref null $Class)"
Line 1308: "call $nextIdentityHash"
Line 1309: "i32.const 1         ;; format"
Line 1310: "i32.const 11        ;; size"
Line 1311: "ref.null $SqueakObject ;; nextObject (ref null $SqueakObject)"
Line 1312: "ref.null eq"
Line 1313: "i32.const 0"
Line 1314: "array.new $ObjectArray"
Line 1315: "ref.as_non_null      ;; $slots (non-nullable)"
Line 1316: "global.get $objectClass ;; superclass (class Object)"
Line 1317: "ref.cast (ref null $Class)"
Line 1318: "local.get $emptyDict ;; methodDictionary (non-nullable)"
Line 1319: "local.get $emptyInstVarNames ;; instanceVariableNames (non-nullable $ObjectArray)"
Line 1320: "local.get $emptySymbol ;; name (non-nullable)"
Line 1321: "i32.const 0         ;; instanceSize"
Line 1322: "struct.new $Class"
Line 1323: "local.set $newObject"
Line 1325: "local.get $vm"
Line 1326: "struct.get $VirtualMachine $lastObject"
Line 1327: "ref.as_non_null"
Line 1328: "local.get $newObject"
Line 1329: "struct.set $SqueakObject $nextObject"
Line 1330: "local.get $newObject"
Line 1331: "local.get $vm"
Line 1332: "struct.set $VirtualMachine $lastObject"
Line 1333: "local.get $newObject"
Line 1334: "ref.cast (ref null $Class)"
Line 1335: "global.set $smallIntegerClass"
Line 1338: "global.get $objectClass ;; class (ref null $Class)"
Line 1339: "call $nextIdentityHash"
Line 1340: "i32.const 2         ;; format (variable object)"
Line 1341: "i32.const 9         ;; size"
Line 1342: "ref.null $SqueakObject ;; nextObject (ref null $SqueakObject)"
Line 1343: "ref.null eq"
Line 1344: "i32.const 0"
Line 1345: "array.new $ObjectArray"
Line 1346: "ref.as_non_null      ;; $slots (non-nullable)"
Line 1347: "ref.null eq"
Line 1348: "i32.const 1"
Line 1349: "array.new $ObjectArray"
Line 1350: "ref.as_non_null      ;; $keys (non-nullable)"
Line 1351: "ref.null eq"
Line 1352: "i32.const 1"
Line 1353: "array.new $ObjectArray"
Line 1354: "ref.as_non_null      ;; $values (non-nullable)"
Line 1355: "i32.const 0         ;; count"
Line 1356: "struct.new $Dictionary"
Line 1357: "local.set $newObject"
Line 1359: "local.get $vm"
Line 1360: "struct.get $VirtualMachine $lastObject"
Line 1361: "ref.as_non_null"
Line 1362: "local.get $newObject"
Line 1363: "struct.set $SqueakObject $nextObject"
Line 1364: "local.get $newObject"
Line 1365: "local.get $vm"
Line 1366: "struct.set $VirtualMachine $lastObject"
Line 1367: "local.get $newObject"
Line 1368: "ref.cast (ref null $Dictionary)"
Line 1369: "local.set $methodDictionary"
Line 1372: "i32.const 0x70      ;; push_receiver"
Line 1373: "i32.const 0xD0      ;; send_workload"
Line 1374: "i32.const 0x7C      ;; return_top"
Line 1375: "array.new_fixed $ByteArray 3"
Line 1376: "local.set $mainBytecodes"
Line 1398: "i32.const 0x70      ;; push_receiver (start with receiver)"
Line 1401: "i32.const 0x21      ;; push literal 1"
Line 1402: "i32.const 0xB0      ;; add (receiver + 1)"
Line 1403: "i32.const 0x22      ;; push literal 2"
Line 1404: "i32.const 0xB8      ;; multiply (* 2)"
Line 1405: "i32.const 0x22      ;; push literal 2"
Line 1406: "i32.const 0xB0      ;; add (+ 2)"
Line 1407: "i32.const 0x23      ;; push literal 3"
Line 1408: "i32.const 0xB8      ;; multiply (* 3)"
Line 1409: "i32.const 0x23      ;; push literal 3"
Line 1410: "i32.const 0xB0      ;; add (+ 3)"
Line 1411: "i32.const 0x22      ;; push literal 2"
Line 1412: "i32.const 0xB8      ;; multiply (* 2)"
Line 1415: "i32.const 0x21      ;; push literal 1"
Line 1416: "i32.const 0xB0      ;; add (+ 1)"
Line 1417: "i32.const 0x22      ;; push literal 2"
Line 1418: "i32.const 0xB8      ;; multiply (* 2)"
Line 1419: "i32.const 0x22      ;; push literal 2"
Line 1420: "i32.const 0xB0      ;; add (+ 2)"
Line 1421: "i32.const 0x23      ;; push literal 3"
Line 1422: "i32.const 0xB8      ;; multiply (* 3)"
Line 1423: "i32.const 0x23      ;; push literal 3"
Line 1424: "i32.const 0xB0      ;; add (+ 3)"
Line 1425: "i32.const 0x22      ;; push literal 2"
Line 1426: "i32.const 0xB8      ;; multiply (* 2)"
Line 1429: "i32.const 0x21      ;; push literal 1"
Line 1430: "i32.const 0xB0      ;; add (+ 1)"
Line 1431: "i32.const 0x22      ;; push literal 2"
Line 1432: "i32.const 0xB8      ;; multiply (* 2)"
Line 1433: "i32.const 0x22      ;; push literal 2"
Line 1434: "i32.const 0xB0      ;; add (+ 2)"
Line 1435: "i32.const 0x23      ;; push literal 3"
Line 1436: "i32.const 0xB8      ;; multiply (* 3)"
Line 1437: "i32.const 0x23      ;; push literal 3"
Line 1438: "i32.const 0xB0      ;; add (+ 3)"
Line 1439: "i32.const 0x22      ;; push literal 2"
Line 1440: "i32.const 0xB8      ;; multiply (* 2)"
Line 1443: "i32.const 0x21      ;; push literal 1"
Line 1444: "i32.const 0xB0      ;; add (+ 1)"
Line 1445: "i32.const 0x22      ;; push literal 2"
Line 1446: "i32.const 0xB8      ;; multiply (* 2)"
Line 1447: "i32.const 0x22      ;; push literal 2"
Line 1448: "i32.const 0xB0      ;; add (+ 2)"
Line 1449: "i32.const 0x23      ;; push literal 3"
Line 1450: "i32.const 0xB8      ;; multiply (* 3)"
Line 1451: "i32.const 0x23      ;; push literal 3"
Line 1452: "i32.const 0xB0      ;; add (+ 3)"
Line 1453: "i32.const 0x22      ;; push literal 2"
Line 1454: "i32.const 0xB8      ;; multiply (* 2)"
Line 1457: "i32.const 0x21      ;; push literal 1"
Line 1458: "i32.const 0xB0      ;; add (+ 1)"
Line 1459: "i32.const 0x22      ;; push literal 2"
Line 1460: "i32.const 0xB8      ;; multiply (* 2)"
Line 1461: "i32.const 0x22      ;; push literal 2"
Line 1462: "i32.const 0xB0      ;; add (+ 2)"
Line 1463: "i32.const 0x23      ;; push literal 3"
Line 1464: "i32.const 0xB8      ;; multiply (* 3)"
Line 1465: "i32.const 0x23      ;; push literal 3"
Line 1466: "i32.const 0xB0      ;; add (+ 3)"
Line 1467: "i32.const 0x22      ;; push literal 2"
Line 1468: "i32.const 0xB8      ;; multiply (* 2)"
Line 1471: "i32.const 0x7C      ;; return_top"
Line 1472: "array.new_fixed $ByteArray 62"
Line 1473: "local.set $workloadBytecodes"
Line 1477: "global.get $objectClass ;; class (ref null $Class)"
Line 1478: "call $nextIdentityHash"
Line 1479: "i32.const 8         ;; format (byte object)"
Line 1480: "i32.const 7         ;; size"
Line 1481: "ref.null $SqueakObject ;; nextObject (ref null $SqueakObject)"
Line 1482: "ref.null eq"
Line 1483: "i32.const 0"
Line 1484: "array.new $ObjectArray"
Line 1485: "ref.as_non_null"
Line 1488: "i32.const 119       ;; 'w'"
Line 1489: "i32.const 111       ;; 'o'"
Line 1490: "i32.const 114       ;; 'r'"
Line 1491: "i32.const 107       ;; 'k'"
Line 1492: "i32.const 108       ;; 'l'"
Line 1493: "i32.const 111       ;; 'o'"
Line 1494: "i32.const 97        ;; 'a'"
Line 1495: "i32.const 100       ;; 'd'"
Line 1496: "array.new_fixed $ByteArray 8"
Line 1497: "struct.new $Symbol"
Line 1498: "local.set $workloadSelector"
Line 1500: "local.get $vm"
Line 1501: "struct.get $VirtualMachine $lastObject"
Line 1502: "ref.as_non_null"
Line 1503: "local.get $workloadSelector"
Line 1504: "ref.as_non_null"
Line 1505: "struct.set $SqueakObject $nextObject"
Line 1506: "local.get $workloadSelector"
Line 1507: "ref.as_non_null"
Line 1508: "local.get $vm"
Line 1509: "struct.set $VirtualMachine $lastObject"
Line 1512: "ref.null eq"
Line 1513: "i32.const 1"
Line 1514: "array.new $ObjectArray"
Line 1515: "local.set $slots"
Line 1516: "local.get $slots"
Line 1517: "i32.const 0  ;; index 0"
Line 1518: "local.get $workloadSelector"
Line 1519: "ref.as_non_null"
Line 1520: "array.set $ObjectArray"
Line 1523: "global.get $objectClass ;; class (ref null $Class)"
Line 1524: "call $nextIdentityHash  ;; identityHash (i32)"
Line 1525: "i32.const 6         ;; format (i32)"
Line 1526: "i32.const 14        ;; size (i32)"
Line 1527: "ref.null $SqueakObject ;; nextObject (ref null $SqueakObject)"
Line 1528: "local.get $slots      ;; slots (ref $ObjectArray)"
Line 1529: "i32.const 0         ;; header (i32)"
Line 1530: "local.get $mainBytecodes ;; bytecodes (ref null $ByteArray)"
Line 1531: "i32.const 0         ;; invocationCount (i32)"
Line 1532: "i32.const 0         ;; functionIndex (i32)"
Line 1533: "global.get $translationThreshold"
Line 1534: "i32.const 0         ;; isInstalled (i32)"
Line 1535: "struct.new $CompiledMethod"
Line 1536: "local.set $newObject"
Line 1537: "local.get $newObject"
Line 1538: "ref.cast (ref null $CompiledMethod)"
Line 1539: "local.set $mainMethod"
Line 1541: "local.get $vm"
Line 1542: "struct.get $VirtualMachine $lastObject"
Line 1543: "ref.as_non_null"
Line 1544: "local.get $newObject"
Line 1545: "struct.set $SqueakObject $nextObject"
Line 1546: "local.get $newObject"
Line 1547: "local.get $vm"
Line 1548: "struct.set $VirtualMachine $lastObject"
Line 1552: "ref.null eq"
Line 1553: "i32.const 4          ;; Need 4 literal slots (0-3, but we only use 1-3)"
Line 1554: "array.new $ObjectArray"
Line 1555: "ref.as_non_null"
Line 1556: "local.set $workloadSlots"
Line 1559: "local.get $workloadSlots"
Line 1560: "i32.const 0  ;; literal[0] = 0 (unused but keep for consistency)"
Line 1561: "i32.const 0"
Line 1562: "call $smallIntegerForValue"
Line 1563: "ref.as_non_null"
Line 1564: "array.set $ObjectArray"
Line 1566: "local.get $workloadSlots"
Line 1567: "i32.const 1  ;; literal[1] = 1"
Line 1568: "i32.const 1"
Line 1569: "call $smallIntegerForValue"
Line 1570: "ref.as_non_null"
Line 1571: "array.set $ObjectArray"
Line 1573: "local.get $workloadSlots"
Line 1574: "i32.const 2  ;; literal[2] = 2"
Line 1575: "i32.const 2"
Line 1576: "call $smallIntegerForValue"
Line 1577: "ref.as_non_null"
Line 1578: "array.set $ObjectArray"
Line 1580: "local.get $workloadSlots"
Line 1581: "i32.const 3  ;; literal[3] = 3"
Line 1582: "i32.const 3"
Line 1583: "call $smallIntegerForValue"
Line 1584: "ref.as_non_null"
Line 1585: "array.set $ObjectArray"
Line 1588: "global.get $objectClass ;; class (ref null $Class)"
Line 1589: "call $nextIdentityHash  ;; identityHash (i32)"
Line 1590: "i32.const 6         ;; format (i32)"
Line 1591: "i32.const 14        ;; size (i32)"
Line 1592: "ref.null $SqueakObject ;; nextObject (ref null $SqueakObject)"
Line 1593: "local.get $workloadSlots ;; slots (ref $ObjectArray) - now has proper literals"
Line 1594: "i32.const 0         ;; header (i32)"
Line 1595: "local.get $workloadBytecodes ;; bytecodes (ref null $ByteArray)"
Line 1596: "i32.const 0         ;; invocationCount (i32)"
Line 1597: "i32.const 0         ;; functionIndex (i32)"
Line 1598: "global.get $translationThreshold"
Line 1599: "i32.const 0         ;; isInstalled (i32)"
Line 1600: "struct.new $CompiledMethod"
Line 1601: "local.set $newObject"
Line 1602: "local.get $newObject"
Line 1603: "ref.cast (ref null $CompiledMethod)"
Line 1604: "local.set $workloadMethod"
Line 1606: "local.get $vm"
Line 1607: "struct.get $VirtualMachine $lastObject"
Line 1608: "ref.as_non_null"
Line 1609: "local.get $newObject"
Line 1610: "struct.set $SqueakObject $nextObject"
Line 1611: "local.get $newObject"
Line 1612: "local.get $vm"
Line 1613: "struct.set $VirtualMachine $lastObject"
Line 1616: "global.get $smallIntegerClass"
Line 1617: "ref.as_non_null"
Line 1618: "local.get $methodDictionary"
Line 1619: "ref.as_non_null"
Line 1620: "struct.set $Class $methodDictionary"
Line 1623: "local.get $methodDictionary"
Line 1624: "ref.as_non_null"
Line 1625: "struct.get $Dictionary $keys"
Line 1626: "ref.as_non_null"
Line 1627: "i32.const 0  ;; index 0"
Line 1628: "local.get $workloadSelector"
Line 1629: "ref.as_non_null"
Line 1630: "array.set $ObjectArray"
Line 1633: "local.get $methodDictionary"
Line 1634: "ref.as_non_null"
Line 1635: "struct.get $Dictionary $values"
Line 1636: "ref.as_non_null"
Line 1637: "i32.const 0  ;; index 0"
Line 1638: "local.get $workloadMethod"
Line 1639: "ref.as_non_null"
Line 1640: "array.set $ObjectArray"
Line 1643: "local.get $methodDictionary"
Line 1644: "ref.as_non_null"
Line 1645: "i32.const 1"
Line 1646: "struct.set $Dictionary $count"
Line 1649: "local.get $workloadMethod"
Line 1650: "ref.as_non_null"
Line 1651: "i32.const 1"
Line 1652: "struct.set $CompiledMethod $isInstalled"
Line 1655: "local.get $mainMethod"
Line 1656: "global.set $mainMethod"
Line 1659: "i32.const 1"
Line 1660: ") ;; (func $createMinimalBootstrap (result i32)"
Line 1663: "(func $interpretBytecode"
Line 1664: "(param $vm (ref $VirtualMachine))"
Line 1665: "(param $context (ref $Context))"
Line 1666: "(param $bytecode i32)"
Line 1667: "(result i32)"
Line 1668: "(local $receiver eqref)"
Line 1669: "(local $value1 eqref)"
Line 1670: "(local $value2 eqref)"
Line 1671: "(local $int1 i32)"
Line 1672: "(local $int2 i32)"
Line 1673: "(local $result i32)"
Line 1674: "(local $newContext (ref $Context))"
Line 1675: "(local $selector eqref)"
Line 1676: "(local $method (ref $CompiledMethod))"
Line 1677: "(local $receiverClass (ref $Class))"
Line 1678: "(local $selectorIndex i32)"
Line 1679: "(local $slots (ref $ObjectArray))"
Line 1684: "local.get $bytecode"
Line 1685: "i32.const 0x20  ;; Push literal base"
Line 1686: "i32.ge_u"
Line 1687: "local.get $bytecode"
Line 1688: "i32.const 0x2F  ;; Push literal end"
Line 1689: "i32.le_u"
Line 1690: "i32.and"
Line 1691: "if"
  -> Folding IF block starting at line 1691
  -> IF folded, consumed 40 lines
Line 1732: "local.get $bytecode"
Line 1733: "i32.const 0x70  ;; Push receiver"
Line 1734: "i32.eq"
Line 1735: "if"
  -> Folding IF block starting at line 1735
  -> IF folded, consumed 10 lines
Line 1746: "local.get $bytecode"
Line 1747: "i32.const 0xB8  ;; Multiply (pop two, multiply, push result)"
Line 1748: "i32.eq"
Line 1749: "if"
  -> Folding IF block starting at line 1749
  -> IF folded, consumed 50 lines
Line 1800: "local.get $bytecode"
Line 1801: "i32.const 0xB0  ;; Add (pop two, add, push result)"
Line 1802: "i32.eq"
Line 1803: "if"
  -> Folding IF block starting at line 1803
  -> IF folded, consumed 50 lines
Line 1854: "local.get $bytecode"
Line 1855: "i32.const 0x7C  ;; Return top-of-stack"
Line 1856: "i32.eq"
Line 1857: "if"
  -> Folding IF block starting at line 1857
  -> IF folded, consumed 5 lines
Line 1863: "local.get $bytecode"
Line 1864: "i32.const 0xD0  ;; Send message (generic for any selector)"
Line 1865: "i32.eq"
Line 1866: "if"
  -> Folding IF block starting at line 1866
  -> IF folded, consumed 100 lines
Line 1968: "i32.const 0"
Line 1969: ") ;; (func $interpretBytecode"
Line 1972: "(func $interpret (export "interpret") (result i32)"
Line 1973: "(local $vm (ref $VirtualMachine))"
Line 1974: "(local $context (ref $Context))"
Line 1975: "(local $method (ref $CompiledMethod))"
Line 1976: "(local $bytecode i32)"
Line 1977: "(local $pc i32)"
Line 1978: "(local $stack (ref $ObjectArray))"
Line 1979: "(local $slots (ref $ObjectArray))"
Line 1980: "(local $args (ref $ObjectArray))"
Line 1981: "(local $temps (ref $ObjectArray))"
Line 1982: "(local $receiver (ref eq))"
Line 1983: "(local $resultValue (ref eq))"
Line 1984: "(local $invocationCount i32)"
Line 1985: "(local $bytecodes (ref $ByteArray))"
Line 1986: "(local $funcIndex i32)"
Line 1989: "ref.null eq"
Line 1990: "i32.const 20"
Line 1991: "array.new $ObjectArray"
Line 1992: "local.set $stack"
Line 1994: "ref.null eq"
Line 1995: "i32.const 0"
Line 1996: "array.new $ObjectArray"
Line 1997: "local.set $slots"
Line 1998: "ref.null eq"
Line 1999: "i32.const 0"
Line 2000: "array.new $ObjectArray"
Line 2001: "local.set $args"
Line 2002: "ref.null eq"
Line 2003: "i32.const 0"
Line 2004: "array.new $ObjectArray"
Line 2005: "local.set $temps"
Line 2008: "i32.const 100"
Line 2009: "ref.i31"
Line 2010: "local.set $receiver"
Line 2013: "global.get $objectClass ;; class (Context is-a Object for now)"
Line 2014: "i32.const 2001       ;; identityHash"
Line 2015: "i32.const 14         ;; format (MethodContext)"
Line 2016: "i32.const 14         ;; size"
Line 2017: "ref.null $SqueakObject ;; nextObject"
Line 2018: "local.get $slots     ;; slots (non-nullable)"
Line 2019: "ref.null $Context    ;; sender"
Line 2020: "i32.const 0          ;; pc"
Line 2021: "i32.const 0          ;; sp (stack pointer)"
Line 2022: "global.get $mainMethod ;; method"
Line 2023: "local.get $receiver   ;; receiver (SmallInteger 3)"
Line 2024: "local.get $args      ;; args (non-nullable)"
Line 2025: "local.get $temps     ;; temps (non-nullable)"
Line 2026: "local.get $stack     ;; stack (non-nullable)"
Line 2027: "struct.new $Context"
Line 2028: "local.get $vm"
Line 2029: "struct.set $VirtualMachine $activeContext"
Line 2031: "block $finished"
  -> Folding BLOCK block starting at line 2031
  -> BLOCK folded, consumed 192 lines
Line 2224: "i32.const 1 ;; success"
Line 2225: "return"
Line 2226: ") ;; (func $interpret"
Line 2227: ")"
✅ Successfully converted squeak-vm-core.wat to folded syntax
📄 Output written to: squeak-vm-core-folded.wat
🎯 Folded syntax should make function signature errors more visible with proper indentation
⚠️ Warning: 40 'end' keywords still remain

📋 Remaining end keywords found in these contexts:
Line 201: ;; Reached end of object list - method not found
Line 204: end ;; if
Line 222: end ;; if
Line 406: end
Line 721: end ;; if
Line 734: end ;; if
Line 747: end ;; if
Line 759: end ;; if
Line 779: end ;; if
Line 795: end ;; if
Line 800: end ;; loop $search_loop
Line 854: end ;; if
Line 867: end ;; if
Line 894: end ;; if
Line 1643: (i32.const 0x2F ;; Push literal end)
Line 1680: end ;; else
Line 1713: end ;; if
Line 1726: end ;; if
Line 1765: end ;; if
Line 1778: end ;; if
Line 1825: end ;; if
Line 1853: end ;; if
Line 1887: end ;; if
Line 1894: end ;; if
Line 1977: end ;; if
Line 2018: end ;; if
Line 2019: end ;; if
Line 2020: end ;; if
Line 2050: end ;; if
Line 2073: ;; Check if we've reached end of bytecodes
Line 2082: end ;; if
Line 2101: end ;; if
Line 2126: end ;; end inner if (pc == 0)
Line 2128: end ;; end outer if (context switched)
Line 2131: end ;; loop $interpreter_loop
Line 2132: end ;; if
Line 2133: end ;; $finished
Line 2141: end ;; loop $execution_loop

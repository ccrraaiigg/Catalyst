   0x0 | 00 61 73 6d | version 1 (Module)
       | 01 00 00 00
   0x8 | 01 9d 02    | type section
   0xb | 10          | 16 count
--- rec group 0 (explicit) ---
   0xc | 4e 09       | 
   0xe | 5e 6d 01    | [type 0] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Array(ArrayType(FieldType { element_type: Val(Ref(eqref)), mutable: true })), shared: false } }
  0x11 | 5e 78 01    | [type 1] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Array(ArrayType(FieldType { element_type: I8, mutable: true })), shared: false } }
  0x14 | 50 00 5f 05 | [type 2] SubType { is_final: false, supertype_idx: None, composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }] }), shared: false } }
       | 63 05 01 7f
       | 01 7f 01 7f
       | 01 63 02 01
  0x24 | 50 01 02 5f | [type 3] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 2 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }] }), shared: false } }
       | 06 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
  0x38 | 50 01 03 5f | [type 4] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 1)))), mutable: false }] }), shared: false } }
       | 07 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 01 00   
  0x4f | 50 01 03 5f | [type 5] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 6)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 4)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }] }), shared: false } }
       | 0b 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 05 01 63
       | 06 01 63 02
       | 01 63 04 01
       | 7f 01      
  0x71 | 50 01 03 5f | [type 6] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: false }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: false }, FieldType { element_type: Val(I32), mutable: true }] }), shared: false } }
       | 09 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 00 00 63
       | 00 00 7f 01
  0x8d | 50 01 03 5f | [type 7] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(I32), mutable: false }, FieldType { element_type: Val(Ref((ref null (module 1)))), mutable: false }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref(funcref)), mutable: true }, FieldType { element_type: Val(I32), mutable: false }] }), shared: false } }
       | 0b 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 7f 00 63 01
       | 00 7f 01 70
       | 01 7f 00   
  0xac | 50 01 03 5f | [type 8] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 8)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 7)))), mutable: true }, FieldType { element_type: Val(Ref(eqref)), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }] }), shared: false } }
       | 0e 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 08 01 7f
       | 01 7f 01 63
       | 07 01 6d 01
       | 63 00 01 63
       | 00 01 63 00
       | 01         
--- rec group 1 (implicit) ---
  0xd5 | 60 01 7f 00 | [type 9] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32], results: [] }), shared: false } }
--- rec group 2 (implicit) ---
  0xd9 | 60 04 7f 7f | [type 10] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32, I32, I32, I32], results: [I32] }), shared: false } }
       | 7f 7f 01 7f
--- rec group 3 (implicit) ---
  0xe1 | 60 01 6d 00 | [type 11] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref)], results: [] }), shared: false } }
--- rec group 4 (implicit) ---
  0xe5 | 60 00 00    | [type 12] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [], results: [] }), shared: false } }
--- rec group 5 (implicit) ---
  0xe8 | 60 02 6d 6d | [type 13] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref), Ref(eqref)], results: [] }), shared: false } }
       | 00         
--- rec group 6 (implicit) ---
  0xed | 60 02 7f 7f | [type 14] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32, I32], results: [I32] }), shared: false } }
       | 01 7f      
--- rec group 7 (implicit) ---
  0xf3 | 60 01 7f 01 | [type 15] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32], results: [Ref(eqref)] }), shared: false } }
       | 6d         
--- rec group 8 (implicit) ---
  0xf8 | 60 02 63 07 | [type 16] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref null (module 7))), Ref(eqref)], results: [Ref((ref null (module 8)))] }), shared: false } }
       | 6d 01 63 08
--- rec group 9 (implicit) ---
 0x100 | 60 00 01 7f | [type 17] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [], results: [I32] }), shared: false } }
--- rec group 10 (implicit) ---
 0x104 | 60 01 64 02 | [type 18] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 2)))], results: [] }), shared: false } }
       | 00         
--- rec group 11 (implicit) ---
 0x109 | 60 01 64 01 | [type 19] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 1)))], results: [I32] }), shared: false } }
       | 01 7f      
--- rec group 12 (implicit) ---
 0x10f | 60 02 64 01 | [type 20] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 1))), I32], results: [I32] }), shared: false } }
       | 7f 01 7f   
--- rec group 13 (implicit) ---
 0x116 | 60 01 64 00 | [type 21] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 0)))], results: [I32] }), shared: false } }
       | 01 7f      
--- rec group 14 (implicit) ---
 0x11c | 60 02 64 00 | [type 22] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 0))), I32], results: [Ref(eqref)] }), shared: false } }
       | 7f 01 6d   
--- rec group 15 (implicit) ---
 0x123 | 60 01 6d 01 | [type 23] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref)], results: [I32] }), shared: false } }
       | 7f         
 0x128 | 02 2f       | import section
 0x12a | 02          | 2 count
 0x12b | 02 6a 73 0d | import [func 0] Import { module: "js", name: "report_result", ty: Func(9) }
       | 72 65 70 6f
       | 72 74 5f 72
       | 65 73 75 6c
       | 74 00 09   
 0x13e | 02 6a 73 15 | import [func 1] Import { module: "js", name: "jit_compile_method_js", ty: Func(10) }
       | 6a 69 74 5f
       | 63 6f 6d 70
       | 69 6c 65 5f
       | 6d 65 74 68
       | 6f 64 5f 6a
       | 73 00 0a   
 0x159 | 03 13       | func section
 0x15b | 12          | 18 count
 0x15c | 0e          | [func 2] type 14
 0x15d | 0e          | [func 3] type 14
 0x15e | 0b          | [func 4] type 11
 0x15f | 0c          | [func 5] type 12
 0x160 | 0d          | [func 6] type 13
 0x161 | 0f          | [func 7] type 15
 0x162 | 10          | [func 8] type 16
 0x163 | 11          | [func 9] type 17
 0x164 | 12          | [func 10] type 18
 0x165 | 09          | [func 11] type 9
 0x166 | 13          | [func 12] type 19
 0x167 | 14          | [func 13] type 20
 0x168 | 15          | [func 14] type 21
 0x169 | 16          | [func 15] type 22
 0x16a | 17          | [func 16] type 23
 0x16b | 17          | [func 17] type 23
 0x16c | 0c          | [func 18] type 12
 0x16d | 0c          | [func 19] type 12
 0x16e | 0d 07       | tag section
 0x170 | 03          | 3 count
 0x171 | 00 0b       | [tag 0] TagType { kind: Exception, func_type_idx: 11 }
 0x173 | 00 0c       | [tag 1] TagType { kind: Exception, func_type_idx: 12 }
 0x175 | 00 0d       | [tag 2] TagType { kind: Exception, func_type_idx: 13 }
 0x177 | 06 70       | global section
 0x179 | 14          | 20 count
 0x17a | 63 05 01    | [global 0] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x17d | d0 05       | ref_null hty:Concrete(Module(5))
 0x17f | 0b          | end
 0x180 | 63 05 01    | [global 1] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x183 | d0 05       | ref_null hty:Concrete(Module(5))
 0x185 | 0b          | end
 0x186 | 63 05 01    | [global 2] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x189 | d0 05       | ref_null hty:Concrete(Module(5))
 0x18b | 0b          | end
 0x18c | 63 05 01    | [global 3] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x18f | d0 05       | ref_null hty:Concrete(Module(5))
 0x191 | 0b          | end
 0x192 | 63 05 01    | [global 4] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x195 | d0 05       | ref_null hty:Concrete(Module(5))
 0x197 | 0b          | end
 0x198 | 63 05 01    | [global 5] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x19b | d0 05       | ref_null hty:Concrete(Module(5))
 0x19d | 0b          | end
 0x19e | 6d 01       | [global 6] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1a0 | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1a2 | 0b          | end
 0x1a3 | 6d 01       | [global 7] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1a5 | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1a7 | 0b          | end
 0x1a8 | 6d 01       | [global 8] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1aa | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1ac | 0b          | end
 0x1ad | 6d 01       | [global 9] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1af | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1b1 | 0b          | end
 0x1b2 | 6d 01       | [global 10] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1b4 | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1b6 | 0b          | end
 0x1b7 | 6d 01       | [global 11] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1b9 | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1bb | 0b          | end
 0x1bc | 6d 01       | [global 12] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1be | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1c0 | 0b          | end
 0x1c1 | 63 08 01    | [global 13] GlobalType { content_type: Ref((ref null (module 8))), mutable: true, shared: false }
 0x1c4 | d0 08       | ref_null hty:Concrete(Module(8))
 0x1c6 | 0b          | end
 0x1c7 | 63 07 01    | [global 14] GlobalType { content_type: Ref((ref null (module 7))), mutable: true, shared: false }
 0x1ca | d0 07       | ref_null hty:Concrete(Module(7))
 0x1cc | 0b          | end
 0x1cd | 6d 01       | [global 15] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1cf | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1d1 | 0b          | end
 0x1d2 | 7f 01       | [global 16] GlobalType { content_type: I32, mutable: true, shared: false }
 0x1d4 | 41 e8 07    | i32_const value:1000
 0x1d7 | 0b          | end
 0x1d8 | 63 02 01    | [global 17] GlobalType { content_type: Ref((ref null (module 2))), mutable: true, shared: false }
 0x1db | d0 02       | ref_null hty:Concrete(Module(2))
 0x1dd | 0b          | end
 0x1de | 63 02 01    | [global 18] GlobalType { content_type: Ref((ref null (module 2))), mutable: true, shared: false }
 0x1e1 | d0 02       | ref_null hty:Concrete(Module(2))
 0x1e3 | 0b          | end
 0x1e4 | 7f 01       | [global 19] GlobalType { content_type: I32, mutable: true, shared: false }
 0x1e6 | 41 00       | i32_const value:0
 0x1e8 | 0b          | end
 0x1e9 | 07 30       | export section
 0x1eb | 02          | 2 count
 0x1ec | 19 63 72 65 | export Export { name: "createMinimalObjectMemory", kind: Func, index: 18 }
       | 61 74 65 4d
       | 69 6e 69 6d
       | 61 6c 4f 62
       | 6a 65 63 74
       | 4d 65 6d 6f
       | 72 79 00 12
 0x208 | 10 64 65 6d | export Export { name: "demo_computation", kind: Func, index: 19 }
       | 6f 5f 63 6f
       | 6d 70 75 74
       | 61 74 69 6f
       | 6e 00 13   
 0x21b | 0a 88 03    | code section
 0x21e | 12          | 18 count
============== func 2 ====================
 0x21f | 07          | size of function
 0x220 | 00          | 0 local blocks
 0x221 | 20 00       | local_get local_index:0
 0x223 | 20 01       | local_get local_index:1
 0x225 | 6a          | i32_add
 0x226 | 0b          | end
============== func 3 ====================
 0x227 | 07          | size of function
 0x228 | 00          | 0 local blocks
 0x229 | 20 00       | local_get local_index:0
 0x22b | 20 01       | local_get local_index:1
 0x22d | 6c          | i32_mul
 0x22e | 0b          | end
============== func 4 ====================
 0x22f | 02          | size of function
 0x230 | 00          | 0 local blocks
 0x231 | 0b          | end
============== func 5 ====================
 0x232 | 02          | size of function
 0x233 | 00          | 0 local blocks
 0x234 | 0b          | end
============== func 6 ====================
 0x235 | 02          | size of function
 0x236 | 00          | 0 local blocks
 0x237 | 0b          | end
============== func 7 ====================
 0x238 | 06          | size of function
 0x239 | 00          | 0 local blocks
 0x23a | 20 00       | local_get local_index:0
 0x23c | fb 1c       | ref_i31
 0x23e | 0b          | end
============== func 8 ====================
 0x23f | 45          | size of function
 0x240 | 02          | 2 local blocks
 0x241 | 01 63 08    | 1 locals of type Ref((ref null (module 8)))
 0x244 | 01 63 05    | 1 locals of type Ref((ref null (module 5)))
 0x247 | 23 03       | global_get global_index:3
 0x249 | 22 03       | local_tee local_index:3
 0x24b | d1          | ref_is_null
 0x24c | 04 40       | if blockty:Empty
 0x24e | d0 08       | ref_null hty:Concrete(Module(8))
 0x250 | 0f          | return
 0x251 | 0b          | end
 0x252 | 20 03       | local_get local_index:3
 0x254 | 10 09       | call function_index:9
 0x256 | 41 06       | i32_const value:6
 0x258 | 41 0e       | i32_const value:14
 0x25a | d0 02       | ref_null hty:Concrete(Module(2))
 0x25c | d0 00       | ref_null hty:Concrete(Module(0))
 0x25e | d0 08       | ref_null hty:Concrete(Module(8))
 0x260 | 41 00       | i32_const value:0
 0x262 | 41 00       | i32_const value:0
 0x264 | 20 00       | local_get local_index:0
 0x266 | 20 01       | local_get local_index:1
 0x268 | d0 00       | ref_null hty:Concrete(Module(0))
 0x26a | d0 00       | ref_null hty:Concrete(Module(0))
 0x26c | d0 00       | ref_null hty:Concrete(Module(0))
 0x26e | fb 00 08    | struct_new struct_type_index:8
 0x271 | 21 02       | local_set local_index:2
 0x273 | 20 02       | local_get local_index:2
 0x275 | d1          | ref_is_null
 0x276 | 04 63 08    | if blockty:Type(Ref((ref null (module 8))))
 0x279 | 20 02       | local_get local_index:2
 0x27b | 05          | else
 0x27c | 20 02       | local_get local_index:2
 0x27e | d4          | ref_as_non_null
 0x27f | 10 0a       | call function_index:10
 0x281 | 20 02       | local_get local_index:2
 0x283 | 0b          | end
 0x284 | 0b          | end
============== func 9 ====================
 0x285 | 0b          | size of function
 0x286 | 00          | 0 local blocks
 0x287 | 23 10       | global_get global_index:16
 0x289 | 41 01       | i32_const value:1
 0x28b | 6a          | i32_add
 0x28c | 24 10       | global_set global_index:16
 0x28e | 23 10       | global_get global_index:16
 0x290 | 0b          | end
============== func 10 ====================
 0x291 | 26          | size of function
 0x292 | 01          | 1 local blocks
 0x293 | 01 63 02    | 1 locals of type Ref((ref null (module 2)))
 0x296 | 23 12       | global_get global_index:18
 0x298 | 22 01       | local_tee local_index:1
 0x29a | d1          | ref_is_null
 0x29b | 04 40       | if blockty:Empty
 0x29d | 20 00       | local_get local_index:0
 0x29f | 24 11       | global_set global_index:17
 0x2a1 | 05          | else
 0x2a2 | 20 01       | local_get local_index:1
 0x2a4 | d4          | ref_as_non_null
 0x2a5 | 20 00       | local_get local_index:0
 0x2a7 | fb 05 02 04 | struct_set struct_type_index:2 field_index:4
 0x2ab | 0b          | end
 0x2ac | 20 00       | local_get local_index:0
 0x2ae | 24 12       | global_set global_index:18
 0x2b0 | 23 13       | global_get global_index:19
 0x2b2 | 41 01       | i32_const value:1
 0x2b4 | 6a          | i32_add
 0x2b5 | 24 13       | global_set global_index:19
 0x2b7 | 0b          | end
============== func 11 ====================
 0x2b8 | 07          | size of function
 0x2b9 | 00          | 0 local blocks
 0x2ba | 20 00       | local_get local_index:0
 0x2bc | fb 1c       | ref_i31
 0x2be | 1a          | drop
 0x2bf | 0b          | end
============== func 12 ====================
 0x2c0 | 06          | size of function
 0x2c1 | 00          | 0 local blocks
 0x2c2 | 20 00       | local_get local_index:0
 0x2c4 | fb 0f       | array_len
 0x2c6 | 0b          | end
============== func 13 ====================
 0x2c7 | 09          | size of function
 0x2c8 | 00          | 0 local blocks
 0x2c9 | 20 00       | local_get local_index:0
 0x2cb | 20 01       | local_get local_index:1
 0x2cd | fb 0d 01    | array_get_u array_type_index:1
 0x2d0 | 0b          | end
============== func 14 ====================
 0x2d1 | 06          | size of function
 0x2d2 | 00          | 0 local blocks
 0x2d3 | 20 00       | local_get local_index:0
 0x2d5 | fb 0f       | array_len
 0x2d7 | 0b          | end
============== func 15 ====================
 0x2d8 | 09          | size of function
 0x2d9 | 00          | 0 local blocks
 0x2da | 20 00       | local_get local_index:0
 0x2dc | 20 01       | local_get local_index:1
 0x2de | fb 0b 00    | array_get array_type_index:0
 0x2e1 | 0b          | end
============== func 16 ====================
 0x2e2 | 07          | size of function
 0x2e3 | 00          | 0 local blocks
 0x2e4 | 20 00       | local_get local_index:0
 0x2e6 | fb 14 6c    | ref_test_non_null hty:Abstract { shared: false, ty: I31 }
 0x2e9 | 0b          | end
============== func 17 ====================
 0x2ea | 09          | size of function
 0x2eb | 00          | 0 local blocks
 0x2ec | 20 00       | local_get local_index:0
 0x2ee | fb 16 6c    | ref_cast_non_null hty:Abstract { shared: false, ty: I31 }
 0x2f1 | fb 1d       | i31_get_s
 0x2f3 | 0b          | end
============== func 18 ====================
 0x2f4 | 97 01       | size of function
 0x2f6 | 00          | 0 local blocks
 0x2f7 | d0 05       | ref_null hty:Concrete(Module(5))
 0x2f9 | 10 09       | call function_index:9
 0x2fb | 41 01       | i32_const value:1
 0x2fd | 41 0b       | i32_const value:11
 0x2ff | d0 02       | ref_null hty:Concrete(Module(2))
 0x301 | d0 00       | ref_null hty:Concrete(Module(0))
 0x303 | d0 05       | ref_null hty:Concrete(Module(5))
 0x305 | d0 06       | ref_null hty:Concrete(Module(6))
 0x307 | d0 02       | ref_null hty:Concrete(Module(2))
 0x309 | d0 04       | ref_null hty:Concrete(Module(4))
 0x30b | 41 00       | i32_const value:0
 0x30d | fb 00 05    | struct_new struct_type_index:5
 0x310 | 24 00       | global_set global_index:0
 0x312 | 23 00       | global_get global_index:0
 0x314 | 10 09       | call function_index:9
 0x316 | 41 01       | i32_const value:1
 0x318 | 41 0b       | i32_const value:11
 0x31a | d0 02       | ref_null hty:Concrete(Module(2))
 0x31c | d0 00       | ref_null hty:Concrete(Module(0))
 0x31e | 23 00       | global_get global_index:0
 0x320 | d0 06       | ref_null hty:Concrete(Module(6))
 0x322 | d0 02       | ref_null hty:Concrete(Module(2))
 0x324 | d0 04       | ref_null hty:Concrete(Module(4))
 0x326 | 41 06       | i32_const value:6
 0x328 | fb 00 05    | struct_new struct_type_index:5
 0x32b | 24 01       | global_set global_index:1
 0x32d | 23 00       | global_get global_index:0
 0x32f | 23 01       | global_get global_index:1
 0x331 | fb 05 05 00 | struct_set struct_type_index:5 field_index:0
 0x335 | 23 01       | global_get global_index:1
 0x337 | 10 09       | call function_index:9
 0x339 | 41 01       | i32_const value:1
 0x33b | 41 0b       | i32_const value:11
 0x33d | d0 02       | ref_null hty:Concrete(Module(2))
 0x33f | d0 00       | ref_null hty:Concrete(Module(0))
 0x341 | 23 00       | global_get global_index:0
 0x343 | d0 06       | ref_null hty:Concrete(Module(6))
 0x345 | d0 02       | ref_null hty:Concrete(Module(2))
 0x347 | d0 04       | ref_null hty:Concrete(Module(4))
 0x349 | 41 00       | i32_const value:0
 0x34b | fb 00 05    | struct_new struct_type_index:5
 0x34e | 24 05       | global_set global_index:5
 0x350 | 23 01       | global_get global_index:1
 0x352 | 10 09       | call function_index:9
 0x354 | 41 06       | i32_const value:6
 0x356 | 41 0e       | i32_const value:14
 0x358 | d0 02       | ref_null hty:Concrete(Module(2))
 0x35a | d0 00       | ref_null hty:Concrete(Module(0))
 0x35c | 23 00       | global_get global_index:0
 0x35e | d0 06       | ref_null hty:Concrete(Module(6))
 0x360 | d0 02       | ref_null hty:Concrete(Module(2))
 0x362 | d0 04       | ref_null hty:Concrete(Module(4))
 0x364 | 41 0e       | i32_const value:14
 0x366 | fb 00 05    | struct_new struct_type_index:5
 0x369 | 24 03       | global_set global_index:3
 0x36b | 23 01       | global_get global_index:1
 0x36d | 10 09       | call function_index:9
 0x36f | 41 0c       | i32_const value:12
 0x371 | 41 0a       | i32_const value:10
 0x373 | d0 02       | ref_null hty:Concrete(Module(2))
 0x375 | d0 00       | ref_null hty:Concrete(Module(0))
 0x377 | 41 87 80 04 | i32_const value:65543
 0x37b | d0 01       | ref_null hty:Concrete(Module(1))
 0x37d | 41 00       | i32_const value:0
 0x37f | d0 70       | ref_null hty:Abstract { shared: false, ty: Func }
 0x381 | 41 0a       | i32_const value:10
 0x383 | fb 00 07    | struct_new struct_type_index:7
 0x386 | 24 0e       | global_set global_index:14
 0x388 | 41 01       | i32_const value:1
 0x38a | 10 00       | call function_index:0
 0x38c | 0b          | end
============== func 19 ====================
 0x38d | 18          | size of function
 0x38e | 01          | 1 local blocks
 0x38f | 03 7f       | 3 locals of type I32
 0x391 | 41 03       | i32_const value:3
 0x393 | 21 00       | local_set local_index:0
 0x395 | 41 04       | i32_const value:4
 0x397 | 21 01       | local_set local_index:1
 0x399 | 20 00       | local_get local_index:0
 0x39b | 20 01       | local_get local_index:1
 0x39d | 10 02       | call function_index:2
 0x39f | 21 02       | local_set local_index:2
 0x3a1 | 20 02       | local_get local_index:2
 0x3a3 | 10 00       | call function_index:0
 0x3a5 | 0b          | end
 0x3a6 | 00 a3 08    | custom section
 0x3a9 | 04 6e 61 6d | name: "name"
       | 65         
 0x3ae | 00 0d       | module name
 0x3b0 | 0c 53 71 75 | "SqueakVMCore"
       | 65 61 6b 56
       | 4d 43 6f 72
       | 65         
 0x3bd | 01 f3 02    | function name section
 0x3c0 | 14          | 20 count
 0x3c1 | 00 0d 72 65 | Naming { index: 0, name: "report_result" }
       | 70 6f 72 74
       | 5f 72 65 73
       | 75 6c 74   
 0x3d0 | 01 15 6a 69 | Naming { index: 1, name: "jit_compile_method_js" }
       | 74 5f 63 6f
       | 6d 70 69 6c
       | 65 5f 6d 65
       | 74 68 6f 64
       | 5f 6a 73   
 0x3e7 | 02 0f 73 6d | Naming { index: 2, name: "smallIntegerAdd" }
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72 41 64
       | 64         
 0x3f8 | 03 14 73 6d | Naming { index: 3, name: "smallIntegerMultiply" }
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72 4d 75
       | 6c 74 69 70
       | 6c 79      
 0x40e | 04 0b 72 65 | Naming { index: 4, name: "returnValue" }
       | 74 75 72 6e
       | 56 61 6c 75
       | 65         
 0x41b | 05 0f 70 72 | Naming { index: 5, name: "primitiveFailed" }
       | 69 6d 69 74
       | 69 76 65 46
       | 61 69 6c 65
       | 64         
 0x42c | 06 11 64 6f | Naming { index: 6, name: "doesNotUnderstand" }
       | 65 73 4e 6f
       | 74 55 6e 64
       | 65 72 73 74
       | 61 6e 64   
 0x43f | 07 12 63 72 | Naming { index: 7, name: "createSmallInteger" }
       | 65 61 74 65
       | 53 6d 61 6c
       | 6c 49 6e 74
       | 65 67 65 72
 0x453 | 08 0d 63 72 | Naming { index: 8, name: "createContext" }
       | 65 61 74 65
       | 43 6f 6e 74
       | 65 78 74   
 0x462 | 09 10 6e 65 | Naming { index: 9, name: "nextIdentityHash" }
       | 78 74 49 64
       | 65 6e 74 69
       | 74 79 48 61
       | 73 68      
 0x474 | 0a 0f 72 65 | Naming { index: 10, name: "register_object" }
       | 67 69 73 74
       | 65 72 5f 6f
       | 62 6a 65 63
       | 74         
 0x485 | 0b 10 70 75 | Naming { index: 11, name: "pushSmallInteger" }
       | 73 68 53 6d
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72      
 0x497 | 0c 0e 61 72 | Naming { index: 12, name: "array_len_byte" }
       | 72 61 79 5f
       | 6c 65 6e 5f
       | 62 79 74 65
 0x4a7 | 0d 0e 61 72 | Naming { index: 13, name: "array_get_byte" }
       | 72 61 79 5f
       | 67 65 74 5f
       | 62 79 74 65
 0x4b7 | 0e 10 61 72 | Naming { index: 14, name: "array_len_object" }
       | 72 61 79 5f
       | 6c 65 6e 5f
       | 6f 62 6a 65
       | 63 74      
 0x4c9 | 0f 10 61 72 | Naming { index: 15, name: "array_get_object" }
       | 72 61 79 5f
       | 67 65 74 5f
       | 6f 62 6a 65
       | 63 74      
 0x4db | 10 10 69 73 | Naming { index: 16, name: "is_small_integer" }
       | 5f 73 6d 61
       | 6c 6c 5f 69
       | 6e 74 65 67
       | 65 72      
 0x4ed | 11 17 67 65 | Naming { index: 17, name: "get_small_integer_value" }
       | 74 5f 73 6d
       | 61 6c 6c 5f
       | 69 6e 74 65
       | 67 65 72 5f
       | 76 61 6c 75
       | 65         
 0x506 | 12 19 63 72 | Naming { index: 18, name: "createMinimalObjectMemory" }
       | 65 61 74 65
       | 4d 69 6e 69
       | 6d 61 6c 4f
       | 62 6a 65 63
       | 74 4d 65 6d
       | 6f 72 79   
 0x521 | 13 10 64 65 | Naming { index: 19, name: "demo_computation" }
       | 6d 6f 5f 63
       | 6f 6d 70 75
       | 74 61 74 69
       | 6f 6e      
 0x533 | 02 d5 01    | local section
 0x536 | 0f          | 15 count
 0x537 | 02          | function 2 local name section
 0x538 | 02          | 2 count
 0x539 | 00 01 61    | Naming { index: 0, name: "a" }
 0x53c | 01 01 62    | Naming { index: 1, name: "b" }
 0x53f | 03          | function 3 local name section
 0x540 | 02          | 2 count
 0x541 | 00 01 61    | Naming { index: 0, name: "a" }
 0x544 | 01 01 62    | Naming { index: 1, name: "b" }
 0x547 | 04          | function 4 local name section
 0x548 | 01          | 1 count
 0x549 | 00 05 76 61 | Naming { index: 0, name: "value" }
       | 6c 75 65   
 0x550 | 06          | function 6 local name section
 0x551 | 02          | 2 count
 0x552 | 00 08 72 65 | Naming { index: 0, name: "receiver" }
       | 63 65 69 76
       | 65 72      
 0x55c | 01 08 73 65 | Naming { index: 1, name: "selector" }
       | 6c 65 63 74
       | 6f 72      
 0x566 | 07          | function 7 local name section
 0x567 | 01          | 1 count
 0x568 | 00 05 76 61 | Naming { index: 0, name: "value" }
       | 6c 75 65   
 0x56f | 08          | function 8 local name section
 0x570 | 04          | 4 count
 0x571 | 00 06 6d 65 | Naming { index: 0, name: "method" }
       | 74 68 6f 64
 0x579 | 01 08 72 65 | Naming { index: 1, name: "receiver" }
       | 63 65 69 76
       | 65 72      
 0x583 | 02 07 63 6f | Naming { index: 2, name: "context" }
       | 6e 74 65 78
       | 74         
 0x58c | 03 11 63 6f | Naming { index: 3, name: "contextClassLocal" }
       | 6e 74 65 78
       | 74 43 6c 61
       | 73 73 4c 6f
       | 63 61 6c   
 0x59f | 0a          | function 10 local name section
 0x5a0 | 02          | 2 count
 0x5a1 | 00 06 6f 62 | Naming { index: 0, name: "object" }
       | 6a 65 63 74
 0x5a9 | 01 07 6c 61 | Naming { index: 1, name: "lastObj" }
       | 73 74 4f 62
       | 6a         
 0x5b2 | 0b          | function 11 local name section
 0x5b3 | 01          | 1 count
 0x5b4 | 00 05 76 61 | Naming { index: 0, name: "value" }
       | 6c 75 65   
 0x5bb | 0c          | function 12 local name section
 0x5bc | 01          | 1 count
 0x5bd | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x5c4 | 0d          | function 13 local name section
 0x5c5 | 02          | 2 count
 0x5c6 | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x5cd | 01 05 69 6e | Naming { index: 1, name: "index" }
       | 64 65 78   
 0x5d4 | 0e          | function 14 local name section
 0x5d5 | 01          | 1 count
 0x5d6 | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x5dd | 0f          | function 15 local name section
 0x5de | 02          | 2 count
 0x5df | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x5e6 | 01 05 69 6e | Naming { index: 1, name: "index" }
       | 64 65 78   
 0x5ed | 10          | function 16 local name section
 0x5ee | 01          | 1 count
 0x5ef | 00 03 6f 62 | Naming { index: 0, name: "obj" }
       | 6a         
 0x5f4 | 11          | function 17 local name section
 0x5f5 | 01          | 1 count
 0x5f6 | 00 03 6f 62 | Naming { index: 0, name: "obj" }
       | 6a         
 0x5fb | 13          | function 19 local name section
 0x5fc | 03          | 3 count
 0x5fd | 00 01 61    | Naming { index: 0, name: "a" }
 0x600 | 01 01 62    | Naming { index: 1, name: "b" }
 0x603 | 02 06 72 65 | Naming { index: 2, name: "result" }
       | 73 75 6c 74
 0x60b | 04 6b       | type name section
 0x60d | 09          | 9 count
 0x60e | 00 0b 4f 62 | Naming { index: 0, name: "ObjectArray" }
       | 6a 65 63 74
       | 41 72 72 61
       | 79         
 0x61b | 01 09 42 79 | Naming { index: 1, name: "ByteArray" }
       | 74 65 41 72
       | 72 61 79   
 0x626 | 02 0c 53 71 | Naming { index: 2, name: "SqueakObject" }
       | 75 65 61 6b
       | 4f 62 6a 65
       | 63 74      
 0x634 | 03 0e 56 61 | Naming { index: 3, name: "VariableObject" }
       | 72 69 61 62
       | 6c 65 4f 62
       | 6a 65 63 74
 0x644 | 04 06 53 79 | Naming { index: 4, name: "Symbol" }
       | 6d 62 6f 6c
 0x64c | 05 05 43 6c | Naming { index: 5, name: "Class" }
       | 61 73 73   
 0x653 | 06 0a 44 69 | Naming { index: 6, name: "Dictionary" }
       | 63 74 69 6f
       | 6e 61 72 79
 0x65f | 07 0e 43 6f | Naming { index: 7, name: "CompiledMethod" }
       | 6d 70 69 6c
       | 65 64 4d 65
       | 74 68 6f 64
 0x66f | 08 07 43 6f | Naming { index: 8, name: "Context" }
       | 6e 74 65 78
       | 74         
 0x678 | 07 a2 02    | global name section
 0x67b | 14          | 20 count
 0x67c | 00 0b 6f 62 | Naming { index: 0, name: "objectClass" }
       | 6a 65 63 74
       | 43 6c 61 73
       | 73         
 0x689 | 01 0a 63 6c | Naming { index: 1, name: "classClass" }
       | 61 73 73 43
       | 6c 61 73 73
 0x695 | 02 0b 6d 65 | Naming { index: 2, name: "methodClass" }
       | 74 68 6f 64
       | 43 6c 61 73
       | 73         
 0x6a2 | 03 0c 63 6f | Naming { index: 3, name: "contextClass" }
       | 6e 74 65 78
       | 74 43 6c 61
       | 73 73      
 0x6b0 | 04 0b 73 79 | Naming { index: 4, name: "symbolClass" }
       | 6d 62 6f 6c
       | 43 6c 61 73
       | 73         
 0x6bd | 05 11 73 6d | Naming { index: 5, name: "smallIntegerClass" }
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72 43 6c
       | 61 73 73   
 0x6d0 | 06 09 6e 69 | Naming { index: 6, name: "nilObject" }
       | 6c 4f 62 6a
       | 65 63 74   
 0x6db | 07 0a 74 72 | Naming { index: 7, name: "trueObject" }
       | 75 65 4f 62
       | 6a 65 63 74
 0x6e7 | 08 0b 66 61 | Naming { index: 8, name: "falseObject" }
       | 6c 73 65 4f
       | 62 6a 65 63
       | 74         
 0x6f4 | 09 0c 70 6c | Naming { index: 9, name: "plusSelector" }
       | 75 73 53 65
       | 6c 65 63 74
       | 6f 72      
 0x702 | 0a 0d 74 69 | Naming { index: 10, name: "timesSelector" }
       | 6d 65 73 53
       | 65 6c 65 63
       | 74 6f 72   
 0x711 | 0b 0f 73 71 | Naming { index: 11, name: "squaredSelector" }
       | 75 61 72 65
       | 64 53 65 6c
       | 65 63 74 6f
       | 72         
 0x722 | 0c 12 72 65 | Naming { index: 12, name: "reportToJSSelector" }
       | 70 6f 72 74
       | 54 6f 4a 53
       | 53 65 6c 65
       | 63 74 6f 72
 0x736 | 0d 0d 61 63 | Naming { index: 13, name: "activeContext" }
       | 74 69 76 65
       | 43 6f 6e 74
       | 65 78 74   
 0x745 | 0e 0d 63 75 | Naming { index: 14, name: "currentMethod" }
       | 72 72 65 6e
       | 74 4d 65 74
       | 68 6f 64   
 0x754 | 0f 0f 63 75 | Naming { index: 15, name: "currentReceiver" }
       | 72 72 65 6e
       | 74 52 65 63
       | 65 69 76 65
       | 72         
 0x765 | 10 10 6e 65 | Naming { index: 16, name: "nextIdentityHash" }
       | 78 74 49 64
       | 65 6e 74 69
       | 74 79 48 61
       | 73 68      
 0x777 | 11 0b 66 69 | Naming { index: 17, name: "firstObject" }
       | 72 73 74 4f
       | 62 6a 65 63
       | 74         
 0x784 | 12 0a 6c 61 | Naming { index: 18, name: "lastObject" }
       | 73 74 4f 62
       | 6a 65 63 74
 0x790 | 13 0b 6f 62 | Naming { index: 19, name: "objectCount" }
       | 6a 65 63 74
       | 43 6f 75 6e
       | 74         
 0x79d | 0b 2d       | tag name section
 0x79f | 03          | 3 count
 0x7a0 | 00 06 52 65 | Naming { index: 0, name: "Return" }
       | 74 75 72 6e
 0x7a8 | 01 0f 50 72 | Naming { index: 1, name: "PrimitiveFailed" }
       | 69 6d 69 74
       | 69 76 65 46
       | 61 69 6c 65
       | 64         
 0x7b9 | 02 11 44 6f | Naming { index: 2, name: "DoesNotUnderstand" }
       | 65 73 4e 6f
       | 74 55 6e 64
       | 65 72 73 74
       | 61 6e 64   

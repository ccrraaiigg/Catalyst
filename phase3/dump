   0x0 | 00 61 73 6d | version 1 (Module)
       | 01 00 00 00
   0x8 | 01 b9 02    | type section
   0xb | 15          | 21 count
--- rec group 0 (explicit) ---
   0xc | 4e 09       | 
   0xe | 5e 6d 01    | [type 0] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Array(ArrayType(FieldType { element_type: Val(Ref(eqref)), mutable: true })), shared: false } }
  0x11 | 5e 78 01    | [type 1] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Array(ArrayType(FieldType { element_type: I8, mutable: true })), shared: false } }
  0x14 | 50 00 5f 05 | [type 2] SubType { is_final: false, supertype_idx: None, composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }] }), shared: false } }
       | 63 05 01 7f
       | 01 7f 01 7f
       | 01 63 02 01
  0x24 | 50 01 02 5f | [type 3] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 2 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }] }), shared: false } }
       | 06 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
  0x38 | 50 01 03 5f | [type 4] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 1)))), mutable: false }] }), shared: false } }
       | 07 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 01 00   
  0x4f | 50 01 03 5f | [type 5] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 6)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 4)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }] }), shared: false } }
       | 0b 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 05 01 63
       | 06 01 63 02
       | 01 63 04 01
       | 7f 01      
  0x71 | 50 01 03 5f | [type 6] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: false }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: false }, FieldType { element_type: Val(I32), mutable: true }] }), shared: false } }
       | 09 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 00 00 63
       | 00 00 7f 01
  0x8d | 50 01 03 5f | [type 7] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(I32), mutable: false }, FieldType { element_type: Val(Ref((ref null (module 1)))), mutable: false }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref(funcref)), mutable: true }, FieldType { element_type: Val(I32), mutable: false }] }), shared: false } }
       | 0b 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 7f 00 63 01
       | 00 7f 01 70
       | 01 7f 00   
  0xac | 50 01 03 5f | [type 8] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 8)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 7)))), mutable: true }, FieldType { element_type: Val(Ref(eqref)), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }] }), shared: false } }
       | 0e 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 08 01 7f
       | 01 7f 01 63
       | 07 01 6d 01
       | 63 00 01 63
       | 00 01 63 00
       | 01         
--- rec group 1 (implicit) ---
  0xd5 | 60 01 7f 00 | [type 9] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32], results: [] }), shared: false } }
--- rec group 2 (implicit) ---
  0xd9 | 60 00 01 7e | [type 10] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [], results: [I64] }), shared: false } }
--- rec group 3 (implicit) ---
  0xdd | 60 04 7f 7f | [type 11] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32, I32, I32, I32], results: [I32] }), shared: false } }
       | 7f 7f 01 7f
--- rec group 4 (implicit) ---
  0xe5 | 60 01 6d 00 | [type 12] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref)], results: [] }), shared: false } }
--- rec group 5 (implicit) ---
  0xe9 | 60 00 00    | [type 13] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [], results: [] }), shared: false } }
--- rec group 6 (implicit) ---
  0xec | 60 02 6d 63 | [type 14] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref), Ref((ref null (module 0)))], results: [] }), shared: false } }
       | 00 00      
--- rec group 7 (implicit) ---
  0xf2 | 60 01 64 01 | [type 15] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 1)))], results: [I32] }), shared: false } }
       | 01 7f      
--- rec group 8 (implicit) ---
  0xf8 | 60 02 64 01 | [type 16] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 1))), I32], results: [I32] }), shared: false } }
       | 7f 01 7f   
--- rec group 9 (implicit) ---
  0xff | 60 01 64 00 | [type 17] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 0)))], results: [I32] }), shared: false } }
       | 01 7f      
--- rec group 10 (implicit) ---
 0x105 | 60 02 64 00 | [type 18] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 0))), I32], results: [Ref(eqref)] }), shared: false } }
       | 7f 01 6d   
--- rec group 11 (implicit) ---
 0x10c | 60 01 6d 01 | [type 19] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref)], results: [I32] }), shared: false } }
       | 7f         
--- rec group 12 (implicit) ---
 0x111 | 60 00 01 7f | [type 20] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [], results: [I32] }), shared: false } }
--- rec group 13 (implicit) ---
 0x115 | 60 01 64 02 | [type 21] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 2)))], results: [] }), shared: false } }
       | 00         
--- rec group 14 (implicit) ---
 0x11a | 60 02 6d 7f | [type 22] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref), I32], results: [] }), shared: false } }
       | 00         
--- rec group 15 (implicit) ---
 0x11f | 60 01 64 08 | [type 23] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 8)))], results: [I32] }), shared: false } }
       | 01 7f      
--- rec group 16 (implicit) ---
 0x125 | 60 02 64 08 | [type 24] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 8))), I32], results: [] }), shared: false } }
       | 7f 00      
--- rec group 17 (implicit) ---
 0x12b | 60 01 64 08 | [type 25] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 8)))], results: [Ref((ref null (module 7)))] }), shared: false } }
       | 01 63 07   
--- rec group 18 (implicit) ---
 0x132 | 60 01 64 07 | [type 26] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 7)))], results: [Ref((ref null (module 1)))] }), shared: false } }
       | 01 63 01   
--- rec group 19 (implicit) ---
 0x139 | 60 01 64 07 | [type 27] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 7)))], results: [] }), shared: false } }
       | 00         
--- rec group 20 (implicit) ---
 0x13e | 60 02 7f 7f | [type 28] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32, I32], results: [I32] }), shared: false } }
       | 01 7f      
 0x144 | 02 6c       | import section
 0x146 | 05          | 5 count
 0x147 | 06 73 79 73 | import [func 0] Import { module: "system", name: "reportResult", ty: Func(9) }
       | 74 65 6d 0c
       | 72 65 70 6f
       | 72 74 52 65
       | 73 75 6c 74
       | 00 09      
 0x15d | 06 73 79 73 | import [func 1] Import { module: "system", name: "currentTimeMillis", ty: Func(10) }
       | 74 65 6d 11
       | 63 75 72 72
       | 65 6e 74 54
       | 69 6d 65 4d
       | 69 6c 6c 69
       | 73 00 0a   
 0x178 | 06 73 79 73 | import [func 2] Import { module: "system", name: "consoleLog", ty: Func(9) }
       | 74 65 6d 0a
       | 63 6f 6e 73
       | 6f 6c 65 4c
       | 6f 67 00 09
 0x18c | 03 6a 69 74 | import [func 3] Import { module: "jit", name: "compileMethod", ty: Func(11) }
       | 0d 63 6f 6d
       | 70 69 6c 65
       | 4d 65 74 68
       | 6f 64 00 0b
 0x1a0 | 03 6a 69 74 | import [func 4] Import { module: "jit", name: "reportError", ty: Func(9) }
       | 0b 72 65 70
       | 6f 72 74 45
       | 72 72 6f 72
       | 00 09      
 0x1b2 | 03 1a       | func section
 0x1b4 | 19          | 25 count
 0x1b5 | 0f          | [func 5] type 15
 0x1b6 | 10          | [func 6] type 16
 0x1b7 | 11          | [func 7] type 17
 0x1b8 | 12          | [func 8] type 18
 0x1b9 | 13          | [func 9] type 19
 0x1ba | 13          | [func 10] type 19
 0x1bb | 14          | [func 11] type 20
 0x1bc | 15          | [func 12] type 21
 0x1bd | 09          | [func 13] type 9
 0x1be | 16          | [func 14] type 22
 0x1bf | 17          | [func 15] type 23
 0x1c0 | 18          | [func 16] type 24
 0x1c1 | 19          | [func 17] type 25
 0x1c2 | 1a          | [func 18] type 26
 0x1c3 | 1b          | [func 19] type 27
 0x1c4 | 1c          | [func 20] type 28
 0x1c5 | 1c          | [func 21] type 28
 0x1c6 | 0d          | [func 22] type 13
 0x1c7 | 1b          | [func 23] type 27
 0x1c8 | 1b          | [func 24] type 27
 0x1c9 | 09          | [func 25] type 9
 0x1ca | 09          | [func 26] type 9
 0x1cb | 09          | [func 27] type 9
 0x1cc | 0d          | [func 28] type 13
 0x1cd | 14          | [func 29] type 20
 0x1ce | 0d 07       | tag section
 0x1d0 | 03          | 3 count
 0x1d1 | 00 0c       | [tag 0] TagType { kind: Exception, func_type_idx: 12 }
 0x1d3 | 00 0d       | [tag 1] TagType { kind: Exception, func_type_idx: 13 }
 0x1d5 | 00 0e       | [tag 2] TagType { kind: Exception, func_type_idx: 14 }
 0x1d7 | 06 47       | global section
 0x1d9 | 14          | 20 count
 0x1da | 63 05 01    | [global 0] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1dd | 0b          | end
 0x1de | 63 05 01    | [global 1] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1e1 | 0b          | end
 0x1e2 | 63 05 01    | [global 2] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1e5 | 0b          | end
 0x1e6 | 63 05 01    | [global 3] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1e9 | 0b          | end
 0x1ea | 63 05 01    | [global 4] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1ed | 0b          | end
 0x1ee | 63 05 01    | [global 5] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1f1 | 0b          | end
 0x1f2 | 6d 01       | [global 6] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1f4 | 0b          | end
 0x1f5 | 6d 01       | [global 7] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1f7 | 0b          | end
 0x1f8 | 6d 01       | [global 8] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1fa | 0b          | end
 0x1fb | 6d 01       | [global 9] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1fd | 0b          | end
 0x1fe | 6d 01       | [global 10] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x200 | 0b          | end
 0x201 | 6d 01       | [global 11] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x203 | 0b          | end
 0x204 | 6d 01       | [global 12] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x206 | 0b          | end
 0x207 | 63 08 01    | [global 13] GlobalType { content_type: Ref((ref null (module 8))), mutable: true, shared: false }
 0x20a | 0b          | end
 0x20b | 63 07 01    | [global 14] GlobalType { content_type: Ref((ref null (module 7))), mutable: true, shared: false }
 0x20e | 0b          | end
 0x20f | 6d 01       | [global 15] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x211 | 0b          | end
 0x212 | 7f 01       | [global 16] GlobalType { content_type: I32, mutable: true, shared: false }
 0x214 | 0b          | end
 0x215 | 63 02 01    | [global 17] GlobalType { content_type: Ref((ref null (module 2))), mutable: true, shared: false }
 0x218 | 0b          | end
 0x219 | 63 02 01    | [global 18] GlobalType { content_type: Ref((ref null (module 2))), mutable: true, shared: false }
 0x21c | 0b          | end
 0x21d | 7f 01       | [global 19] GlobalType { content_type: I32, mutable: true, shared: false }
 0x21f | 0b          | end
 0x220 | 07 30       | export section
 0x222 | 03          | 3 count
 0x223 | 09 69 6e 74 | export Export { name: "interpret", kind: Func, index: 22 }
       | 65 72 70 72
       | 65 74 00 16
 0x22f | 19 63 72 65 | export Export { name: "createMinimalObjectMemory", kind: Func, index: 28 }
       | 61 74 65 4d
       | 69 6e 69 6d
       | 61 6c 4f 62
       | 6a 65 63 74
       | 4d 65 6d 6f
       | 72 79 00 1c
 0x24b | 04 74 65 73 | export Export { name: "test", kind: Func, index: 29 }
       | 74 00 1d   
 0x252 | 0a ae 03    | code section
 0x255 | 19          | 25 count
============== func 5 ====================
 0x256 | 06          | size of function
 0x257 | 00          | 0 local blocks
 0x258 | 20 00       | local_get local_index:0
 0x25a | fb 0f       | array_len
 0x25c | 0b          | end
============== func 6 ====================
 0x25d | 09          | size of function
 0x25e | 00          | 0 local blocks
 0x25f | 20 00       | local_get local_index:0
 0x261 | 20 01       | local_get local_index:1
 0x263 | fb 0b 01    | array_get array_type_index:1
 0x266 | 0b          | end
============== func 7 ====================
 0x267 | 06          | size of function
 0x268 | 00          | 0 local blocks
 0x269 | 20 00       | local_get local_index:0
 0x26b | fb 0f       | array_len
 0x26d | 0b          | end
============== func 8 ====================
 0x26e | 09          | size of function
 0x26f | 00          | 0 local blocks
 0x270 | 20 00       | local_get local_index:0
 0x272 | 20 01       | local_get local_index:1
 0x274 | fb 0b 00    | array_get array_type_index:0
 0x277 | 0b          | end
============== func 9 ====================
 0x278 | 07          | size of function
 0x279 | 00          | 0 local blocks
 0x27a | 20 00       | local_get local_index:0
 0x27c | fb 14 6c    | ref_test_non_null hty:Abstract { shared: false, ty: I31 }
 0x27f | 0b          | end
============== func 10 ====================
 0x280 | 09          | size of function
 0x281 | 00          | 0 local blocks
 0x282 | 20 00       | local_get local_index:0
 0x284 | fb 16 6c    | ref_cast_non_null hty:Abstract { shared: false, ty: I31 }
 0x287 | fb 1d       | i31_get_s
 0x289 | 0b          | end
============== func 11 ====================
 0x28a | 0b          | size of function
 0x28b | 00          | 0 local blocks
 0x28c | 23 10       | global_get global_index:16
 0x28e | 41 01       | i32_const value:1
 0x290 | 6a          | i32_add
 0x291 | 24 10       | global_set global_index:16
 0x293 | 23 10       | global_get global_index:16
 0x295 | 0b          | end
============== func 12 ====================
 0x296 | 20          | size of function
 0x297 | 00          | 0 local blocks
 0x298 | 23 12       | global_get global_index:18
 0x29a | d1          | ref_is_null
 0x29b | 04 40       | if blockty:Empty
 0x29d | 20 00       | local_get local_index:0
 0x29f | 24 11       | global_set global_index:17
 0x2a1 | 05          | else
 0x2a2 | 23 12       | global_get global_index:18
 0x2a4 | 20 00       | local_get local_index:0
 0x2a6 | fb 05 02 04 | struct_set struct_type_index:2 field_index:4
 0x2aa | 0b          | end
 0x2ab | 20 00       | local_get local_index:0
 0x2ad | 24 12       | global_set global_index:18
 0x2af | 23 13       | global_get global_index:19
 0x2b1 | 41 01       | i32_const value:1
 0x2b3 | 6a          | i32_add
 0x2b4 | 24 13       | global_set global_index:19
 0x2b6 | 0b          | end
============== func 13 ====================
 0x2b7 | 07          | size of function
 0x2b8 | 00          | 0 local blocks
 0x2b9 | 20 00       | local_get local_index:0
 0x2bb | fb 1c       | ref_i31
 0x2bd | 1a          | drop
 0x2be | 0b          | end
============== func 14 ====================
 0x2bf | 02          | size of function
 0x2c0 | 00          | 0 local blocks
 0x2c1 | 0b          | end
============== func 15 ====================
 0x2c2 | 08          | size of function
 0x2c3 | 00          | 0 local blocks
 0x2c4 | 20 00       | local_get local_index:0
 0x2c6 | fb 02 08 07 | struct_get struct_type_index:8 field_index:7
 0x2ca | 0b          | end
============== func 16 ====================
 0x2cb | 0a          | size of function
 0x2cc | 00          | 0 local blocks
 0x2cd | 20 00       | local_get local_index:0
 0x2cf | 20 01       | local_get local_index:1
 0x2d1 | fb 05 08 07 | struct_set struct_type_index:8 field_index:7
 0x2d5 | 0b          | end
============== func 17 ====================
 0x2d6 | 08          | size of function
 0x2d7 | 00          | 0 local blocks
 0x2d8 | 20 00       | local_get local_index:0
 0x2da | fb 02 08 09 | struct_get struct_type_index:8 field_index:9
 0x2de | 0b          | end
============== func 18 ====================
 0x2df | 08          | size of function
 0x2e0 | 00          | 0 local blocks
 0x2e1 | 20 00       | local_get local_index:0
 0x2e3 | fb 02 07 07 | struct_get struct_type_index:7 field_index:7
 0x2e7 | 0b          | end
============== func 19 ====================
 0x2e8 | 17          | size of function
 0x2e9 | 01          | 1 local blocks
 0x2ea | 01 7f       | 1 locals of type I32
 0x2ec | 20 00       | local_get local_index:0
 0x2ee | fb 02 07 08 | struct_get struct_type_index:7 field_index:8
 0x2f2 | 21 01       | local_set local_index:1
 0x2f4 | 20 00       | local_get local_index:0
 0x2f6 | 20 01       | local_get local_index:1
 0x2f8 | 41 01       | i32_const value:1
 0x2fa | 6a          | i32_add
 0x2fb | fb 05 07 08 | struct_set struct_type_index:7 field_index:8
 0x2ff | 0b          | end
============== func 20 ====================
 0x300 | 07          | size of function
 0x301 | 00          | 0 local blocks
 0x302 | 20 00       | local_get local_index:0
 0x304 | 20 01       | local_get local_index:1
 0x306 | 6a          | i32_add
 0x307 | 0b          | end
============== func 21 ====================
 0x308 | 07          | size of function
 0x309 | 00          | 0 local blocks
 0x30a | 20 00       | local_get local_index:0
 0x30c | 20 01       | local_get local_index:1
 0x30e | 6c          | i32_mul
 0x30f | 0b          | end
============== func 22 ====================
 0x310 | 5a          | size of function
 0x311 | 04          | 4 local blocks
 0x312 | 01 63 08    | 1 locals of type Ref((ref null (module 8)))
 0x315 | 01 63 07    | 1 locals of type Ref((ref null (module 7)))
 0x318 | 02 7f       | 2 locals of type I32
 0x31a | 01 63 01    | 1 locals of type Ref((ref null (module 1)))
 0x31d | 03 40       | loop blockty:Empty
 0x31f | 06 40       | try blockty:Empty
 0x321 | 23 0d       | global_get global_index:13
 0x323 | d4          | ref_as_non_null
 0x324 | 22 00       | local_tee local_index:0
 0x326 | fb 02 08 09 | struct_get struct_type_index:8 field_index:9
 0x32a | d4          | ref_as_non_null
 0x32b | 22 01       | local_tee local_index:1
 0x32d | 20 00       | local_get local_index:0
 0x32f | fb 02 08 07 | struct_get struct_type_index:8 field_index:7
 0x333 | 22 02       | local_tee local_index:2
 0x335 | 20 01       | local_get local_index:1
 0x337 | fb 02 07 07 | struct_get struct_type_index:7 field_index:7
 0x33b | d4          | ref_as_non_null
 0x33c | 22 04       | local_tee local_index:4
 0x33e | 20 02       | local_get local_index:2
 0x340 | 10 06       | call function_index:6
 0x342 | 21 03       | local_set local_index:3
 0x344 | 20 00       | local_get local_index:0
 0x346 | 20 02       | local_get local_index:2
 0x348 | 41 01       | i32_const value:1
 0x34a | 6a          | i32_add
 0x34b | fb 05 08 07 | struct_set struct_type_index:8 field_index:7
 0x34f | 20 01       | local_get local_index:1
 0x351 | 10 17       | call function_index:23
 0x353 | 20 03       | local_get local_index:3
 0x355 | 10 19       | call function_index:25
 0x357 | 0c 01       | br relative_depth:1
 0x359 | 07 00       | catch tag_index:0
 0x35b | 10 00       | call function_index:0
 0x35d | 0f          | return
 0x35e | 07 01       | catch tag_index:1
 0x360 | 0c 01       | br relative_depth:1
 0x362 | 07 02       | catch tag_index:2
 0x364 | 1a          | drop
 0x365 | 1a          | drop
 0x366 | 0c 01       | br relative_depth:1
 0x368 | 0b          | end
 0x369 | 0b          | end
 0x36a | 0b          | end
============== func 23 ====================
 0x36b | 2e          | size of function
 0x36c | 01          | 1 local blocks
 0x36d | 02 7f       | 2 locals of type I32
 0x36f | 20 00       | local_get local_index:0
 0x371 | fb 02 07 08 | struct_get struct_type_index:7 field_index:8
 0x375 | 21 01       | local_set local_index:1
 0x377 | 20 00       | local_get local_index:0
 0x379 | fb 02 07 0a | struct_get struct_type_index:7 field_index:10
 0x37d | 21 02       | local_set local_index:2
 0x37f | 20 01       | local_get local_index:1
 0x381 | 20 02       | local_get local_index:2
 0x383 | 4f          | i32_ge_u
 0x384 | 04 40       | if blockty:Empty
 0x386 | 20 00       | local_get local_index:0
 0x388 | fb 02 07 09 | struct_get struct_type_index:7 field_index:9
 0x38c | d1          | ref_is_null
 0x38d | 04 40       | if blockty:Empty
 0x38f | 20 00       | local_get local_index:0
 0x391 | 10 18       | call function_index:24
 0x393 | 0b          | end
 0x394 | 0b          | end
 0x395 | 20 00       | local_get local_index:0
 0x397 | 10 13       | call function_index:19
 0x399 | 0b          | end
============== func 24 ====================
 0x39a | 29          | size of function
 0x39b | 02          | 2 local blocks
 0x39c | 01 63 01    | 1 locals of type Ref((ref null (module 1)))
 0x39f | 02 7f       | 2 locals of type I32
 0x3a1 | 20 00       | local_get local_index:0
 0x3a3 | fb 02 07 07 | struct_get struct_type_index:7 field_index:7
 0x3a7 | 21 01       | local_set local_index:1
 0x3a9 | 20 00       | local_get local_index:0
 0x3ab | fb 02 07 06 | struct_get struct_type_index:7 field_index:6
 0x3af | 21 03       | local_set local_index:3
 0x3b1 | 20 01       | local_get local_index:1
 0x3b3 | d4          | ref_as_non_null
 0x3b4 | 10 05       | call function_index:5
 0x3b6 | 21 02       | local_set local_index:2
 0x3b8 | 20 02       | local_get local_index:2
 0x3ba | 20 03       | local_get local_index:3
 0x3bc | 41 00       | i32_const value:0
 0x3be | 41 00       | i32_const value:0
 0x3c0 | 10 03       | call function_index:3
 0x3c2 | 1a          | drop
 0x3c3 | 0b          | end
============== func 25 ====================
 0x3c4 | 1f          | size of function
 0x3c5 | 00          | 0 local blocks
 0x3c6 | 20 00       | local_get local_index:0
 0x3c8 | 41 10       | i32_const value:16
 0x3ca | 49          | i32_lt_u
 0x3cb | 04 40       | if blockty:Empty
 0x3cd | 20 00       | local_get local_index:0
 0x3cf | 10 1a       | call function_index:26
 0x3d1 | 0f          | return
 0x3d2 | 0b          | end
 0x3d3 | 20 00       | local_get local_index:0
 0x3d5 | 41 20       | i32_const value:32
 0x3d7 | 49          | i32_lt_u
 0x3d8 | 04 40       | if blockty:Empty
 0x3da | 20 00       | local_get local_index:0
 0x3dc | 41 10       | i32_const value:16
 0x3de | 6b          | i32_sub
 0x3df | 10 1b       | call function_index:27
 0x3e1 | 0f          | return
 0x3e2 | 0b          | end
 0x3e3 | 0b          | end
============== func 26 ====================
 0x3e4 | 02          | size of function
 0x3e5 | 00          | 0 local blocks
 0x3e6 | 0b          | end
============== func 27 ====================
 0x3e7 | 02          | size of function
 0x3e8 | 00          | 0 local blocks
 0x3e9 | 0b          | end
============== func 28 ====================
 0x3ea | 07          | size of function
 0x3eb | 00          | 0 local blocks
 0x3ec | 41 e8 07    | i32_const value:1000
 0x3ef | 24 10       | global_set global_index:16
 0x3f1 | 0b          | end
============== func 29 ====================
 0x3f2 | 10          | size of function
 0x3f3 | 01          | 1 local blocks
 0x3f4 | 01 7f       | 1 locals of type I32
 0x3f6 | 41 03       | i32_const value:3
 0x3f8 | 41 04       | i32_const value:4
 0x3fa | 10 14       | call function_index:20
 0x3fc | 22 00       | local_tee local_index:0
 0x3fe | 10 00       | call function_index:0
 0x400 | 20 00       | local_get local_index:0
 0x402 | 0b          | end
 0x403 | 00 89 0b    | custom section
 0x406 | 04 6e 61 6d | name: "name"
       | 65         
 0x40b | 00 0d       | module name
 0x40d | 0c 53 71 75 | "SqueakVMCore"
       | 65 61 6b 56
       | 4d 43 6f 72
       | 65         
 0x41a | 01 b5 04    | function name section
 0x41d | 1e          | 30 count
 0x41e | 00 14 73 79 | Naming { index: 0, name: "system_report_result" }
       | 73 74 65 6d
       | 5f 72 65 70
       | 6f 72 74 5f
       | 72 65 73 75
       | 6c 74      
 0x434 | 01 11 63 75 | Naming { index: 1, name: "currentTimeMillis" }
       | 72 72 65 6e
       | 74 54 69 6d
       | 65 4d 69 6c
       | 6c 69 73   
 0x447 | 02 0a 63 6f | Naming { index: 2, name: "consoleLog" }
       | 6e 73 6f 6c
       | 65 4c 6f 67
 0x453 | 03 15 6a 69 | Naming { index: 3, name: "jit_compile_method_js" }
       | 74 5f 63 6f
       | 6d 70 69 6c
       | 65 5f 6d 65
       | 74 68 6f 64
       | 5f 6a 73   
 0x46a | 04 0f 6a 73 | Naming { index: 4, name: "js_report_error" }
       | 5f 72 65 70
       | 6f 72 74 5f
       | 65 72 72 6f
       | 72         
 0x47b | 05 0e 61 72 | Naming { index: 5, name: "array_len_byte" }
       | 72 61 79 5f
       | 6c 65 6e 5f
       | 62 79 74 65
 0x48b | 06 0e 61 72 | Naming { index: 6, name: "array_get_byte" }
       | 72 61 79 5f
       | 67 65 74 5f
       | 62 79 74 65
 0x49b | 07 10 61 72 | Naming { index: 7, name: "array_len_object" }
       | 72 61 79 5f
       | 6c 65 6e 5f
       | 6f 62 6a 65
       | 63 74      
 0x4ad | 08 10 61 72 | Naming { index: 8, name: "array_get_object" }
       | 72 61 79 5f
       | 67 65 74 5f
       | 6f 62 6a 65
       | 63 74      
 0x4bf | 09 10 69 73 | Naming { index: 9, name: "is_small_integer" }
       | 5f 73 6d 61
       | 6c 6c 5f 69
       | 6e 74 65 67
       | 65 72      
 0x4d1 | 0a 17 67 65 | Naming { index: 10, name: "get_small_integer_value" }
       | 74 5f 73 6d
       | 61 6c 6c 5f
       | 69 6e 74 65
       | 67 65 72 5f
       | 76 61 6c 75
       | 65         
 0x4ea | 0b 10 6e 65 | Naming { index: 11, name: "nextIdentityHash" }
       | 78 74 49 64
       | 65 6e 74 69
       | 74 79 48 61
       | 73 68      
 0x4fc | 0c 0f 72 65 | Naming { index: 12, name: "register_object" }
       | 67 69 73 74
       | 65 72 5f 6f
       | 62 6a 65 63
       | 74         
 0x50d | 0d 10 70 75 | Naming { index: 13, name: "pushSmallInteger" }
       | 73 68 53 6d
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72      
 0x51f | 0e 0b 73 65 | Naming { index: 14, name: "sendMessage" }
       | 6e 64 4d 65
       | 73 73 61 67
       | 65         
 0x52c | 0f 0e 67 65 | Naming { index: 15, name: "get_context_pc" }
       | 74 5f 63 6f
       | 6e 74 65 78
       | 74 5f 70 63
 0x53c | 10 0e 73 65 | Naming { index: 16, name: "set_context_pc" }
       | 74 5f 63 6f
       | 6e 74 65 78
       | 74 5f 70 63
 0x54c | 11 12 67 65 | Naming { index: 17, name: "get_context_method" }
       | 74 5f 63 6f
       | 6e 74 65 78
       | 74 5f 6d 65
       | 74 68 6f 64
 0x560 | 12 14 67 65 | Naming { index: 18, name: "get_method_bytecodes" }
       | 74 5f 6d 65
       | 74 68 6f 64
       | 5f 62 79 74
       | 65 63 6f 64
       | 65 73      
 0x576 | 13 1a 69 6e | Naming { index: 19, name: "increment_invocation_count" }
       | 63 72 65 6d
       | 65 6e 74 5f
       | 69 6e 76 6f
       | 63 61 74 69
       | 6f 6e 5f 63
       | 6f 75 6e 74
 0x592 | 14 0f 73 6d | Naming { index: 20, name: "smallIntegerAdd" }
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72 41 64
       | 64         
 0x5a3 | 15 14 73 6d | Naming { index: 21, name: "smallIntegerMultiply" }
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72 4d 75
       | 6c 74 69 70
       | 6c 79      
 0x5b9 | 16 09 69 6e | Naming { index: 22, name: "interpret" }
       | 74 65 72 70
       | 72 65 74   
 0x5c4 | 17 15 63 68 | Naming { index: 23, name: "check_jit_compilation" }
       | 65 63 6b 5f
       | 6a 69 74 5f
       | 63 6f 6d 70
       | 69 6c 61 74
       | 69 6f 6e   
 0x5db | 18 12 6a 69 | Naming { index: 24, name: "jit_compile_method" }
       | 74 5f 63 6f
       | 6d 70 69 6c
       | 65 5f 6d 65
       | 74 68 6f 64
 0x5ef | 19 11 64 69 | Naming { index: 25, name: "dispatch_bytecode" }
       | 73 70 61 74
       | 63 68 5f 62
       | 79 74 65 63
       | 6f 64 65   
 0x602 | 1a 16 70 75 | Naming { index: 26, name: "push_receiver_variable" }
       | 73 68 5f 72
       | 65 63 65 69
       | 76 65 72 5f
       | 76 61 72 69
       | 61 62 6c 65
 0x61a | 1b 15 70 75 | Naming { index: 27, name: "push_literal_constant" }
       | 73 68 5f 6c
       | 69 74 65 72
       | 61 6c 5f 63
       | 6f 6e 73 74
       | 61 6e 74   
 0x631 | 1c 19 63 72 | Naming { index: 28, name: "createMinimalObjectMemory" }
       | 65 61 74 65
       | 4d 69 6e 69
       | 6d 61 6c 4f
       | 62 6a 65 63
       | 74 4d 65 6d
       | 6f 72 79   
 0x64c | 1d 04 74 65 | Naming { index: 29, name: "test" }
       | 73 74      
 0x652 | 02 d1 02    | local section
 0x655 | 17          | 23 count
 0x656 | 05          | function 5 local name section
 0x657 | 01          | 1 count
 0x658 | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x65f | 06          | function 6 local name section
 0x660 | 02          | 2 count
 0x661 | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x668 | 01 05 69 6e | Naming { index: 1, name: "index" }
       | 64 65 78   
 0x66f | 07          | function 7 local name section
 0x670 | 01          | 1 count
 0x671 | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x678 | 08          | function 8 local name section
 0x679 | 02          | 2 count
 0x67a | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x681 | 01 05 69 6e | Naming { index: 1, name: "index" }
       | 64 65 78   
 0x688 | 09          | function 9 local name section
 0x689 | 01          | 1 count
 0x68a | 00 03 6f 62 | Naming { index: 0, name: "obj" }
       | 6a         
 0x68f | 0a          | function 10 local name section
 0x690 | 01          | 1 count
 0x691 | 00 03 6f 62 | Naming { index: 0, name: "obj" }
       | 6a         
 0x696 | 0c          | function 12 local name section
 0x697 | 01          | 1 count
 0x698 | 00 06 6f 62 | Naming { index: 0, name: "object" }
       | 6a 65 63 74
 0x6a0 | 0d          | function 13 local name section
 0x6a1 | 01          | 1 count
 0x6a2 | 00 05 76 61 | Naming { index: 0, name: "value" }
       | 6c 75 65   
 0x6a9 | 0e          | function 14 local name section
 0x6aa | 02          | 2 count
 0x6ab | 00 08 73 65 | Naming { index: 0, name: "selector" }
       | 6c 65 63 74
       | 6f 72      
 0x6b5 | 01 08 61 72 | Naming { index: 1, name: "argCount" }
       | 67 43 6f 75
       | 6e 74      
 0x6bf | 0f          | function 15 local name section
 0x6c0 | 01          | 1 count
 0x6c1 | 00 07 63 6f | Naming { index: 0, name: "context" }
       | 6e 74 65 78
       | 74         
 0x6ca | 10          | function 16 local name section
 0x6cb | 02          | 2 count
 0x6cc | 00 07 63 6f | Naming { index: 0, name: "context" }
       | 6e 74 65 78
       | 74         
 0x6d5 | 01 02 70 63 | Naming { index: 1, name: "pc" }
 0x6d9 | 11          | function 17 local name section
 0x6da | 01          | 1 count
 0x6db | 00 07 63 6f | Naming { index: 0, name: "context" }
       | 6e 74 65 78
       | 74         
 0x6e4 | 12          | function 18 local name section
 0x6e5 | 01          | 1 count
 0x6e6 | 00 06 6d 65 | Naming { index: 0, name: "method" }
       | 74 68 6f 64
 0x6ee | 13          | function 19 local name section
 0x6ef | 02          | 2 count
 0x6f0 | 00 06 6d 65 | Naming { index: 0, name: "method" }
       | 74 68 6f 64
 0x6f8 | 01 07 63 75 | Naming { index: 1, name: "current" }
       | 72 72 65 6e
       | 74         
 0x701 | 14          | function 20 local name section
 0x702 | 02          | 2 count
 0x703 | 00 01 61    | Naming { index: 0, name: "a" }
 0x706 | 01 01 62    | Naming { index: 1, name: "b" }
 0x709 | 15          | function 21 local name section
 0x70a | 02          | 2 count
 0x70b | 00 01 61    | Naming { index: 0, name: "a" }
 0x70e | 01 01 62    | Naming { index: 1, name: "b" }
 0x711 | 16          | function 22 local name section
 0x712 | 05          | 5 count
 0x713 | 00 07 63 6f | Naming { index: 0, name: "context" }
       | 6e 74 65 78
       | 74         
 0x71c | 01 06 6d 65 | Naming { index: 1, name: "method" }
       | 74 68 6f 64
 0x724 | 02 02 70 63 | Naming { index: 2, name: "pc" }
 0x728 | 03 08 62 79 | Naming { index: 3, name: "bytecode" }
       | 74 65 63 6f
       | 64 65      
 0x732 | 04 09 62 79 | Naming { index: 4, name: "bytecodes" }
       | 74 65 63 6f
       | 64 65 73   
 0x73d | 17          | function 23 local name section
 0x73e | 03          | 3 count
 0x73f | 00 06 6d 65 | Naming { index: 0, name: "method" }
       | 74 68 6f 64
 0x747 | 01 05 63 6f | Naming { index: 1, name: "count" }
       | 75 6e 74   
 0x74e | 02 09 74 68 | Naming { index: 2, name: "threshold" }
       | 72 65 73 68
       | 6f 6c 64   
 0x759 | 18          | function 24 local name section
 0x75a | 04          | 4 count
 0x75b | 00 06 6d 65 | Naming { index: 0, name: "method" }
       | 74 68 6f 64
 0x763 | 01 09 62 79 | Naming { index: 1, name: "bytecodes" }
       | 74 65 63 6f
       | 64 65 73   
 0x76e | 02 06 6c 65 | Naming { index: 2, name: "length" }
       | 6e 67 74 68
 0x776 | 03 06 68 65 | Naming { index: 3, name: "header" }
       | 61 64 65 72
 0x77e | 19          | function 25 local name section
 0x77f | 01          | 1 count
 0x780 | 00 08 62 79 | Naming { index: 0, name: "bytecode" }
       | 74 65 63 6f
       | 64 65      
 0x78a | 1a          | function 26 local name section
 0x78b | 01          | 1 count
 0x78c | 00 05 69 6e | Naming { index: 0, name: "index" }
       | 64 65 78   
 0x793 | 1b          | function 27 local name section
 0x794 | 01          | 1 count
 0x795 | 00 05 69 6e | Naming { index: 0, name: "index" }
       | 64 65 78   
 0x79c | 1d          | function 29 local name section
 0x79d | 01          | 1 count
 0x79e | 00 06 72 65 | Naming { index: 0, name: "result" }
       | 73 75 6c 74
 0x7a6 | 03 26       | label section
 0x7a8 | 01          | 1 count
 0x7a9 | 16          | function 22 label name section
 0x7aa | 02          | 2 count
 0x7ab | 00 10 69 6e | Naming { index: 0, name: "interpreter_loop" }
       | 74 65 72 70
       | 72 65 74 65
       | 72 5f 6c 6f
       | 6f 70      
 0x7bd | 01 0f 65 78 | Naming { index: 1, name: "execution_block" }
       | 65 63 75 74
       | 69 6f 6e 5f
       | 62 6c 6f 63
       | 6b         
 0x7ce | 04 6b       | type name section
 0x7d0 | 09          | 9 count
 0x7d1 | 00 0b 4f 62 | Naming { index: 0, name: "ObjectArray" }
       | 6a 65 63 74
       | 41 72 72 61
       | 79         
 0x7de | 01 09 42 79 | Naming { index: 1, name: "ByteArray" }
       | 74 65 41 72
       | 72 61 79   
 0x7e9 | 02 0c 53 71 | Naming { index: 2, name: "SqueakObject" }
       | 75 65 61 6b
       | 4f 62 6a 65
       | 63 74      
 0x7f7 | 03 0e 56 61 | Naming { index: 3, name: "VariableObject" }
       | 72 69 61 62
       | 6c 65 4f 62
       | 6a 65 63 74
 0x807 | 04 06 53 79 | Naming { index: 4, name: "Symbol" }
       | 6d 62 6f 6c
 0x80f | 05 05 43 6c | Naming { index: 5, name: "Class" }
       | 61 73 73   
 0x816 | 06 0a 44 69 | Naming { index: 6, name: "Dictionary" }
       | 63 74 69 6f
       | 6e 61 72 79
 0x822 | 07 0e 43 6f | Naming { index: 7, name: "CompiledMethod" }
       | 6d 70 69 6c
       | 65 64 4d 65
       | 74 68 6f 64
 0x832 | 08 07 43 6f | Naming { index: 8, name: "Context" }
       | 6e 74 65 78
       | 74         
 0x83b | 07 a2 02    | global name section
 0x83e | 14          | 20 count
 0x83f | 00 0b 6f 62 | Naming { index: 0, name: "objectClass" }
       | 6a 65 63 74
       | 43 6c 61 73
       | 73         
 0x84c | 01 0a 63 6c | Naming { index: 1, name: "classClass" }
       | 61 73 73 43
       | 6c 61 73 73
 0x858 | 02 0b 6d 65 | Naming { index: 2, name: "methodClass" }
       | 74 68 6f 64
       | 43 6c 61 73
       | 73         
 0x865 | 03 0c 63 6f | Naming { index: 3, name: "contextClass" }
       | 6e 74 65 78
       | 74 43 6c 61
       | 73 73      
 0x873 | 04 0b 73 79 | Naming { index: 4, name: "symbolClass" }
       | 6d 62 6f 6c
       | 43 6c 61 73
       | 73         
 0x880 | 05 11 73 6d | Naming { index: 5, name: "smallIntegerClass" }
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72 43 6c
       | 61 73 73   
 0x893 | 06 09 6e 69 | Naming { index: 6, name: "nilObject" }
       | 6c 4f 62 6a
       | 65 63 74   
 0x89e | 07 0a 74 72 | Naming { index: 7, name: "trueObject" }
       | 75 65 4f 62
       | 6a 65 63 74
 0x8aa | 08 0b 66 61 | Naming { index: 8, name: "falseObject" }
       | 6c 73 65 4f
       | 62 6a 65 63
       | 74         
 0x8b7 | 09 0c 70 6c | Naming { index: 9, name: "plusSelector" }
       | 75 73 53 65
       | 6c 65 63 74
       | 6f 72      
 0x8c5 | 0a 0d 74 69 | Naming { index: 10, name: "timesSelector" }
       | 6d 65 73 53
       | 65 6c 65 63
       | 74 6f 72   
 0x8d4 | 0b 0f 73 71 | Naming { index: 11, name: "squaredSelector" }
       | 75 61 72 65
       | 64 53 65 6c
       | 65 63 74 6f
       | 72         
 0x8e5 | 0c 12 72 65 | Naming { index: 12, name: "reportToJSSelector" }
       | 70 6f 72 74
       | 54 6f 4a 53
       | 53 65 6c 65
       | 63 74 6f 72
 0x8f9 | 0d 0d 61 63 | Naming { index: 13, name: "activeContext" }
       | 74 69 76 65
       | 43 6f 6e 74
       | 65 78 74   
 0x908 | 0e 0d 63 75 | Naming { index: 14, name: "currentMethod" }
       | 72 72 65 6e
       | 74 4d 65 74
       | 68 6f 64   
 0x917 | 0f 0f 63 75 | Naming { index: 15, name: "currentReceiver" }
       | 72 72 65 6e
       | 74 52 65 63
       | 65 69 76 65
       | 72         
 0x928 | 10 10 6e 65 | Naming { index: 16, name: "nextIdentityHash" }
       | 78 74 49 64
       | 65 6e 74 69
       | 74 79 48 61
       | 73 68      
 0x93a | 11 0b 66 69 | Naming { index: 17, name: "firstObject" }
       | 72 73 74 4f
       | 62 6a 65 63
       | 74         
 0x947 | 12 0a 6c 61 | Naming { index: 18, name: "lastObject" }
       | 73 74 4f 62
       | 6a 65 63 74
 0x953 | 13 0b 6f 62 | Naming { index: 19, name: "objectCount" }
       | 6a 65 63 74
       | 43 6f 75 6e
       | 74         
 0x960 | 0b 2d       | tag name section
 0x962 | 03          | 3 count
 0x963 | 00 06 52 65 | Naming { index: 0, name: "Return" }
       | 74 75 72 6e
 0x96b | 01 0f 50 72 | Naming { index: 1, name: "PrimitiveFailed" }
       | 69 6d 69 74
       | 69 76 65 46
       | 61 69 6c 65
       | 64         
 0x97c | 02 11 44 6f | Naming { index: 2, name: "DoesNotUnderstand" }
       | 65 73 4e 6f
       | 74 55 6e 64
       | 65 72 73 74
       | 61 6e 64   

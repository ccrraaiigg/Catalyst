   0x0 | 00 61 73 6d | version 1 (Module)
       | 01 00 00 00
   0x8 | 01 b5 02    | type section
   0xb | 14          | 20 count
--- rec group 0 (explicit) ---
   0xc | 4e 09       | 
   0xe | 5e 6d 01    | [type 0] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Array(ArrayType(FieldType { element_type: Val(Ref(eqref)), mutable: true })), shared: false } }
  0x11 | 5e 78 01    | [type 1] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Array(ArrayType(FieldType { element_type: I8, mutable: true })), shared: false } }
  0x14 | 50 00 5f 05 | [type 2] SubType { is_final: false, supertype_idx: None, composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }] }), shared: false } }
       | 63 05 01 7f
       | 01 7f 01 7f
       | 01 63 02 01
  0x24 | 50 01 02 5f | [type 3] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 2 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }] }), shared: false } }
       | 06 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
  0x38 | 50 01 03 5f | [type 4] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 1)))), mutable: false }] }), shared: false } }
       | 07 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 01 00   
  0x4f | 50 01 03 5f | [type 5] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 6)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 4)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }] }), shared: false } }
       | 0b 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 05 01 63
       | 06 01 63 02
       | 01 63 04 01
       | 7f 01      
  0x71 | 50 01 03 5f | [type 6] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: false }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: false }, FieldType { element_type: Val(I32), mutable: true }] }), shared: false } }
       | 09 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 00 00 63
       | 00 00 7f 01
  0x8d | 50 01 03 5f | [type 7] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(I32), mutable: false }, FieldType { element_type: Val(Ref((ref null (module 1)))), mutable: false }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref(funcref)), mutable: true }, FieldType { element_type: Val(I32), mutable: false }] }), shared: false } }
       | 0b 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 7f 00 63 01
       | 00 7f 01 70
       | 01 7f 00   
  0xac | 50 01 03 5f | [type 8] SubType { is_final: false, supertype_idx: Some(CoreTypeIndex { kind: "module", index: 3 }), composite_type: CompositeType { inner: Struct(StructType { fields: [FieldType { element_type: Val(Ref((ref null (module 5)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 2)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 8)))), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(I32), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 7)))), mutable: true }, FieldType { element_type: Val(Ref(eqref)), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }, FieldType { element_type: Val(Ref((ref null (module 0)))), mutable: true }] }), shared: false } }
       | 0e 63 05 01
       | 7f 01 7f 01
       | 7f 01 63 02
       | 01 63 00 01
       | 63 08 01 7f
       | 01 7f 01 63
       | 07 01 6d 01
       | 63 00 01 63
       | 00 01 63 00
       | 01         
--- rec group 1 (implicit) ---
  0xd5 | 60 01 7f 00 | [type 9] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32], results: [] }), shared: false } }
--- rec group 2 (implicit) ---
  0xd9 | 60 04 7f 7f | [type 10] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32, I32, I32, I32], results: [I32] }), shared: false } }
       | 7f 7f 01 7f
--- rec group 3 (implicit) ---
  0xe1 | 60 01 6d 00 | [type 11] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref)], results: [] }), shared: false } }
--- rec group 4 (implicit) ---
  0xe5 | 60 00 00    | [type 12] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [], results: [] }), shared: false } }
--- rec group 5 (implicit) ---
  0xe8 | 60 02 6d 63 | [type 13] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref), Ref((ref null (module 0)))], results: [] }), shared: false } }
       | 00 00      
--- rec group 6 (implicit) ---
  0xee | 60 01 64 01 | [type 14] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 1)))], results: [I32] }), shared: false } }
       | 01 7f      
--- rec group 7 (implicit) ---
  0xf4 | 60 02 64 01 | [type 15] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 1))), I32], results: [I32] }), shared: false } }
       | 7f 01 7f   
--- rec group 8 (implicit) ---
  0xfb | 60 01 64 00 | [type 16] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 0)))], results: [I32] }), shared: false } }
       | 01 7f      
--- rec group 9 (implicit) ---
 0x101 | 60 02 64 00 | [type 17] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 0))), I32], results: [Ref(eqref)] }), shared: false } }
       | 7f 01 6d   
--- rec group 10 (implicit) ---
 0x108 | 60 01 6d 01 | [type 18] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref)], results: [I32] }), shared: false } }
       | 7f         
--- rec group 11 (implicit) ---
 0x10d | 60 00 01 7f | [type 19] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [], results: [I32] }), shared: false } }
--- rec group 12 (implicit) ---
 0x111 | 60 01 64 02 | [type 20] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 2)))], results: [] }), shared: false } }
       | 00         
--- rec group 13 (implicit) ---
 0x116 | 60 02 6d 7f | [type 21] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref(eqref), I32], results: [] }), shared: false } }
       | 00         
--- rec group 14 (implicit) ---
 0x11b | 60 01 64 08 | [type 22] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 8)))], results: [I32] }), shared: false } }
       | 01 7f      
--- rec group 15 (implicit) ---
 0x121 | 60 02 64 08 | [type 23] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 8))), I32], results: [] }), shared: false } }
       | 7f 00      
--- rec group 16 (implicit) ---
 0x127 | 60 01 64 08 | [type 24] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 8)))], results: [Ref((ref null (module 7)))] }), shared: false } }
       | 01 63 07   
--- rec group 17 (implicit) ---
 0x12e | 60 01 64 07 | [type 25] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 7)))], results: [Ref((ref null (module 1)))] }), shared: false } }
       | 01 63 01   
--- rec group 18 (implicit) ---
 0x135 | 60 01 64 07 | [type 26] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [Ref((ref (module 7)))], results: [] }), shared: false } }
       | 00         
--- rec group 19 (implicit) ---
 0x13a | 60 02 7f 7f | [type 27] SubType { is_final: true, supertype_idx: None, composite_type: CompositeType { inner: Func(FuncType { params: [I32, I32], results: [I32] }), shared: false } }
       | 01 7f      
 0x140 | 02 2f       | import section
 0x142 | 02          | 2 count
 0x143 | 02 6a 73 0d | import [func 0] Import { module: "js", name: "report_result", ty: Func(9) }
       | 72 65 70 6f
       | 72 74 5f 72
       | 65 73 75 6c
       | 74 00 09   
 0x156 | 02 6a 73 15 | import [func 1] Import { module: "js", name: "jit_compile_method_js", ty: Func(10) }
       | 6a 69 74 5f
       | 63 6f 6d 70
       | 69 6c 65 5f
       | 6d 65 74 68
       | 6f 64 5f 6a
       | 73 00 0a   
 0x171 | 03 1a       | func section
 0x173 | 19          | 25 count
 0x174 | 0e          | [func 2] type 14
 0x175 | 0f          | [func 3] type 15
 0x176 | 10          | [func 4] type 16
 0x177 | 11          | [func 5] type 17
 0x178 | 12          | [func 6] type 18
 0x179 | 12          | [func 7] type 18
 0x17a | 13          | [func 8] type 19
 0x17b | 14          | [func 9] type 20
 0x17c | 09          | [func 10] type 9
 0x17d | 15          | [func 11] type 21
 0x17e | 16          | [func 12] type 22
 0x17f | 17          | [func 13] type 23
 0x180 | 18          | [func 14] type 24
 0x181 | 19          | [func 15] type 25
 0x182 | 1a          | [func 16] type 26
 0x183 | 1b          | [func 17] type 27
 0x184 | 1b          | [func 18] type 27
 0x185 | 0c          | [func 19] type 12
 0x186 | 1a          | [func 20] type 26
 0x187 | 1a          | [func 21] type 26
 0x188 | 09          | [func 22] type 9
 0x189 | 09          | [func 23] type 9
 0x18a | 09          | [func 24] type 9
 0x18b | 0c          | [func 25] type 12
 0x18c | 13          | [func 26] type 19
 0x18d | 0d 07       | tag section
 0x18f | 03          | 3 count
 0x190 | 00 0b       | [tag 0] TagType { kind: Exception, func_type_idx: 11 }
 0x192 | 00 0c       | [tag 1] TagType { kind: Exception, func_type_idx: 12 }
 0x194 | 00 0d       | [tag 2] TagType { kind: Exception, func_type_idx: 13 }
 0x196 | 06 70       | global section
 0x198 | 14          | 20 count
 0x199 | 63 05 01    | [global 0] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x19c | d0 05       | ref_null hty:Concrete(Module(5))
 0x19e | 0b          | end
 0x19f | 63 05 01    | [global 1] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1a2 | d0 05       | ref_null hty:Concrete(Module(5))
 0x1a4 | 0b          | end
 0x1a5 | 63 05 01    | [global 2] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1a8 | d0 05       | ref_null hty:Concrete(Module(5))
 0x1aa | 0b          | end
 0x1ab | 63 05 01    | [global 3] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1ae | d0 05       | ref_null hty:Concrete(Module(5))
 0x1b0 | 0b          | end
 0x1b1 | 63 05 01    | [global 4] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1b4 | d0 05       | ref_null hty:Concrete(Module(5))
 0x1b6 | 0b          | end
 0x1b7 | 63 05 01    | [global 5] GlobalType { content_type: Ref((ref null (module 5))), mutable: true, shared: false }
 0x1ba | d0 05       | ref_null hty:Concrete(Module(5))
 0x1bc | 0b          | end
 0x1bd | 6d 01       | [global 6] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1bf | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1c1 | 0b          | end
 0x1c2 | 6d 01       | [global 7] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1c4 | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1c6 | 0b          | end
 0x1c7 | 6d 01       | [global 8] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1c9 | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1cb | 0b          | end
 0x1cc | 6d 01       | [global 9] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1ce | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1d0 | 0b          | end
 0x1d1 | 6d 01       | [global 10] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1d3 | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1d5 | 0b          | end
 0x1d6 | 6d 01       | [global 11] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1d8 | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1da | 0b          | end
 0x1db | 6d 01       | [global 12] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1dd | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1df | 0b          | end
 0x1e0 | 63 08 01    | [global 13] GlobalType { content_type: Ref((ref null (module 8))), mutable: true, shared: false }
 0x1e3 | d0 08       | ref_null hty:Concrete(Module(8))
 0x1e5 | 0b          | end
 0x1e6 | 63 07 01    | [global 14] GlobalType { content_type: Ref((ref null (module 7))), mutable: true, shared: false }
 0x1e9 | d0 07       | ref_null hty:Concrete(Module(7))
 0x1eb | 0b          | end
 0x1ec | 6d 01       | [global 15] GlobalType { content_type: Ref(eqref), mutable: true, shared: false }
 0x1ee | d0 6d       | ref_null hty:Abstract { shared: false, ty: Eq }
 0x1f0 | 0b          | end
 0x1f1 | 7f 01       | [global 16] GlobalType { content_type: I32, mutable: true, shared: false }
 0x1f3 | 41 e8 07    | i32_const value:1000
 0x1f6 | 0b          | end
 0x1f7 | 63 02 01    | [global 17] GlobalType { content_type: Ref((ref null (module 2))), mutable: true, shared: false }
 0x1fa | d0 02       | ref_null hty:Concrete(Module(2))
 0x1fc | 0b          | end
 0x1fd | 63 02 01    | [global 18] GlobalType { content_type: Ref((ref null (module 2))), mutable: true, shared: false }
 0x200 | d0 02       | ref_null hty:Concrete(Module(2))
 0x202 | 0b          | end
 0x203 | 7f 01       | [global 19] GlobalType { content_type: I32, mutable: true, shared: false }
 0x205 | 41 00       | i32_const value:0
 0x207 | 0b          | end
 0x208 | 07 30       | export section
 0x20a | 03          | 3 count
 0x20b | 09 69 6e 74 | export Export { name: "interpret", kind: Func, index: 19 }
       | 65 72 70 72
       | 65 74 00 13
 0x217 | 19 63 72 65 | export Export { name: "createMinimalObjectMemory", kind: Func, index: 25 }
       | 61 74 65 4d
       | 69 6e 69 6d
       | 61 6c 4f 62
       | 6a 65 63 74
       | 4d 65 6d 6f
       | 72 79 00 19
 0x233 | 04 74 65 73 | export Export { name: "test", kind: Func, index: 26 }
       | 74 00 1a   
 0x23a | 0a c0 03    | code section
 0x23d | 19          | 25 count
============== func 2 ====================
 0x23e | 06          | size of function
 0x23f | 00          | 0 local blocks
 0x240 | 20 00       | local_get local_index:0
 0x242 | fb 0f       | array_len
 0x244 | 0b          | end
============== func 3 ====================
 0x245 | 09          | size of function
 0x246 | 00          | 0 local blocks
 0x247 | 20 00       | local_get local_index:0
 0x249 | 20 01       | local_get local_index:1
 0x24b | fb 0d 01    | array_get_u array_type_index:1
 0x24e | 0b          | end
============== func 4 ====================
 0x24f | 06          | size of function
 0x250 | 00          | 0 local blocks
 0x251 | 20 00       | local_get local_index:0
 0x253 | fb 0f       | array_len
 0x255 | 0b          | end
============== func 5 ====================
 0x256 | 09          | size of function
 0x257 | 00          | 0 local blocks
 0x258 | 20 00       | local_get local_index:0
 0x25a | 20 01       | local_get local_index:1
 0x25c | fb 0b 00    | array_get array_type_index:0
 0x25f | 0b          | end
============== func 6 ====================
 0x260 | 07          | size of function
 0x261 | 00          | 0 local blocks
 0x262 | 20 00       | local_get local_index:0
 0x264 | fb 14 6c    | ref_test_non_null hty:Abstract { shared: false, ty: I31 }
 0x267 | 0b          | end
============== func 7 ====================
 0x268 | 09          | size of function
 0x269 | 00          | 0 local blocks
 0x26a | 20 00       | local_get local_index:0
 0x26c | fb 16 6c    | ref_cast_non_null hty:Abstract { shared: false, ty: I31 }
 0x26f | fb 1d       | i31_get_s
 0x271 | 0b          | end
============== func 8 ====================
 0x272 | 0b          | size of function
 0x273 | 00          | 0 local blocks
 0x274 | 23 10       | global_get global_index:16
 0x276 | 41 01       | i32_const value:1
 0x278 | 6a          | i32_add
 0x279 | 24 10       | global_set global_index:16
 0x27b | 23 10       | global_get global_index:16
 0x27d | 0b          | end
============== func 9 ====================
 0x27e | 26          | size of function
 0x27f | 01          | 1 local blocks
 0x280 | 01 63 02    | 1 locals of type Ref((ref null (module 2)))
 0x283 | 23 12       | global_get global_index:18
 0x285 | 22 01       | local_tee local_index:1
 0x287 | d1          | ref_is_null
 0x288 | 04 40       | if blockty:Empty
 0x28a | 20 00       | local_get local_index:0
 0x28c | 24 11       | global_set global_index:17
 0x28e | 05          | else
 0x28f | 20 01       | local_get local_index:1
 0x291 | d4          | ref_as_non_null
 0x292 | 20 00       | local_get local_index:0
 0x294 | fb 05 02 04 | struct_set struct_type_index:2 field_index:4
 0x298 | 0b          | end
 0x299 | 20 00       | local_get local_index:0
 0x29b | 24 12       | global_set global_index:18
 0x29d | 23 13       | global_get global_index:19
 0x29f | 41 01       | i32_const value:1
 0x2a1 | 6a          | i32_add
 0x2a2 | 24 13       | global_set global_index:19
 0x2a4 | 0b          | end
============== func 10 ====================
 0x2a5 | 07          | size of function
 0x2a6 | 00          | 0 local blocks
 0x2a7 | 20 00       | local_get local_index:0
 0x2a9 | fb 1c       | ref_i31
 0x2ab | 1a          | drop
 0x2ac | 0b          | end
============== func 11 ====================
 0x2ad | 02          | size of function
 0x2ae | 00          | 0 local blocks
 0x2af | 0b          | end
============== func 12 ====================
 0x2b0 | 08          | size of function
 0x2b1 | 00          | 0 local blocks
 0x2b2 | 20 00       | local_get local_index:0
 0x2b4 | fb 02 08 07 | struct_get struct_type_index:8 field_index:7
 0x2b8 | 0b          | end
============== func 13 ====================
 0x2b9 | 0a          | size of function
 0x2ba | 00          | 0 local blocks
 0x2bb | 20 00       | local_get local_index:0
 0x2bd | 20 01       | local_get local_index:1
 0x2bf | fb 05 08 07 | struct_set struct_type_index:8 field_index:7
 0x2c3 | 0b          | end
============== func 14 ====================
 0x2c4 | 08          | size of function
 0x2c5 | 00          | 0 local blocks
 0x2c6 | 20 00       | local_get local_index:0
 0x2c8 | fb 02 08 09 | struct_get struct_type_index:8 field_index:9
 0x2cc | 0b          | end
============== func 15 ====================
 0x2cd | 08          | size of function
 0x2ce | 00          | 0 local blocks
 0x2cf | 20 00       | local_get local_index:0
 0x2d1 | fb 02 07 07 | struct_get struct_type_index:7 field_index:7
 0x2d5 | 0b          | end
============== func 16 ====================
 0x2d6 | 17          | size of function
 0x2d7 | 01          | 1 local blocks
 0x2d8 | 01 7f       | 1 locals of type I32
 0x2da | 20 00       | local_get local_index:0
 0x2dc | fb 02 07 08 | struct_get struct_type_index:7 field_index:8
 0x2e0 | 21 01       | local_set local_index:1
 0x2e2 | 20 00       | local_get local_index:0
 0x2e4 | 20 01       | local_get local_index:1
 0x2e6 | 41 01       | i32_const value:1
 0x2e8 | 6a          | i32_add
 0x2e9 | fb 05 07 08 | struct_set struct_type_index:7 field_index:8
 0x2ed | 0b          | end
============== func 17 ====================
 0x2ee | 07          | size of function
 0x2ef | 00          | 0 local blocks
 0x2f0 | 20 00       | local_get local_index:0
 0x2f2 | 20 01       | local_get local_index:1
 0x2f4 | 6a          | i32_add
 0x2f5 | 0b          | end
============== func 18 ====================
 0x2f6 | 07          | size of function
 0x2f7 | 00          | 0 local blocks
 0x2f8 | 20 00       | local_get local_index:0
 0x2fa | 20 01       | local_get local_index:1
 0x2fc | 6c          | i32_mul
 0x2fd | 0b          | end
============== func 19 ====================
 0x2fe | 66          | size of function
 0x2ff | 04          | 4 local blocks
 0x300 | 01 63 08    | 1 locals of type Ref((ref null (module 8)))
 0x303 | 01 64 07    | 1 locals of type Ref((ref (module 7)))
 0x306 | 02 7f       | 2 locals of type I32
 0x308 | 01 64 01    | 1 locals of type Ref((ref (module 1)))
 0x30b | 03 40       | loop blockty:Empty
 0x30d | 23 0d       | global_get global_index:13
 0x30f | d1          | ref_is_null
 0x310 | 04 40       | if blockty:Empty
 0x312 | 0f          | return
 0x313 | 0b          | end
 0x314 | 23 0d       | global_get global_index:13
 0x316 | d4          | ref_as_non_null
 0x317 | 22 00       | local_tee local_index:0
 0x319 | fb 02 08 09 | struct_get struct_type_index:8 field_index:9
 0x31d | d1          | ref_is_null
 0x31e | 04 40       | if blockty:Empty
 0x320 | 0f          | return
 0x321 | 0b          | end
 0x322 | 20 00       | local_get local_index:0
 0x324 | fb 02 08 09 | struct_get struct_type_index:8 field_index:9
 0x328 | d4          | ref_as_non_null
 0x329 | 22 01       | local_tee local_index:1
 0x32b | 20 00       | local_get local_index:0
 0x32d | fb 02 08 07 | struct_get struct_type_index:8 field_index:7
 0x331 | 22 02       | local_tee local_index:2
 0x333 | 20 01       | local_get local_index:1
 0x335 | fb 02 07 07 | struct_get struct_type_index:7 field_index:7
 0x339 | d1          | ref_is_null
 0x33a | 04 40       | if blockty:Empty
 0x33c | 0f          | return
 0x33d | 0b          | end
 0x33e | 20 01       | local_get local_index:1
 0x340 | fb 02 07 07 | struct_get struct_type_index:7 field_index:7
 0x344 | d4          | ref_as_non_null
 0x345 | 22 04       | local_tee local_index:4
 0x347 | 20 04       | local_get local_index:4
 0x349 | 20 02       | local_get local_index:2
 0x34b | 10 03       | call function_index:3
 0x34d | 21 03       | local_set local_index:3
 0x34f | 20 00       | local_get local_index:0
 0x351 | 20 02       | local_get local_index:2
 0x353 | 41 01       | i32_const value:1
 0x355 | 6a          | i32_add
 0x356 | fb 05 08 07 | struct_set struct_type_index:8 field_index:7
 0x35a | 20 01       | local_get local_index:1
 0x35c | 10 14       | call function_index:20
 0x35e | 20 03       | local_get local_index:3
 0x360 | 10 16       | call function_index:22
 0x362 | 0f          | return
 0x363 | 0b          | end
 0x364 | 0b          | end
============== func 20 ====================
 0x365 | 2e          | size of function
 0x366 | 01          | 1 local blocks
 0x367 | 02 7f       | 2 locals of type I32
 0x369 | 20 00       | local_get local_index:0
 0x36b | fb 02 07 08 | struct_get struct_type_index:7 field_index:8
 0x36f | 21 01       | local_set local_index:1
 0x371 | 20 00       | local_get local_index:0
 0x373 | fb 02 07 0a | struct_get struct_type_index:7 field_index:10
 0x377 | 21 02       | local_set local_index:2
 0x379 | 20 01       | local_get local_index:1
 0x37b | 20 02       | local_get local_index:2
 0x37d | 4f          | i32_ge_u
 0x37e | 04 40       | if blockty:Empty
 0x380 | 20 00       | local_get local_index:0
 0x382 | fb 02 07 09 | struct_get struct_type_index:7 field_index:9
 0x386 | d1          | ref_is_null
 0x387 | 04 40       | if blockty:Empty
 0x389 | 20 00       | local_get local_index:0
 0x38b | 10 15       | call function_index:21
 0x38d | 0b          | end
 0x38e | 0b          | end
 0x38f | 20 00       | local_get local_index:0
 0x391 | 10 10       | call function_index:16
 0x393 | 0b          | end
============== func 21 ====================
 0x394 | 29          | size of function
 0x395 | 02          | 2 local blocks
 0x396 | 01 63 01    | 1 locals of type Ref((ref null (module 1)))
 0x399 | 02 7f       | 2 locals of type I32
 0x39b | 20 00       | local_get local_index:0
 0x39d | fb 02 07 07 | struct_get struct_type_index:7 field_index:7
 0x3a1 | 21 01       | local_set local_index:1
 0x3a3 | 20 00       | local_get local_index:0
 0x3a5 | fb 02 07 06 | struct_get struct_type_index:7 field_index:6
 0x3a9 | 21 03       | local_set local_index:3
 0x3ab | 20 01       | local_get local_index:1
 0x3ad | d4          | ref_as_non_null
 0x3ae | 10 02       | call function_index:2
 0x3b0 | 21 02       | local_set local_index:2
 0x3b2 | 20 02       | local_get local_index:2
 0x3b4 | 20 03       | local_get local_index:3
 0x3b6 | 41 00       | i32_const value:0
 0x3b8 | 41 00       | i32_const value:0
 0x3ba | 10 01       | call function_index:1
 0x3bc | 1a          | drop
 0x3bd | 0b          | end
============== func 22 ====================
 0x3be | 1f          | size of function
 0x3bf | 00          | 0 local blocks
 0x3c0 | 20 00       | local_get local_index:0
 0x3c2 | 41 10       | i32_const value:16
 0x3c4 | 49          | i32_lt_u
 0x3c5 | 04 40       | if blockty:Empty
 0x3c7 | 20 00       | local_get local_index:0
 0x3c9 | 10 17       | call function_index:23
 0x3cb | 0f          | return
 0x3cc | 0b          | end
 0x3cd | 20 00       | local_get local_index:0
 0x3cf | 41 20       | i32_const value:32
 0x3d1 | 49          | i32_lt_u
 0x3d2 | 04 40       | if blockty:Empty
 0x3d4 | 20 00       | local_get local_index:0
 0x3d6 | 41 10       | i32_const value:16
 0x3d8 | 6b          | i32_sub
 0x3d9 | 10 18       | call function_index:24
 0x3db | 0f          | return
 0x3dc | 0b          | end
 0x3dd | 0b          | end
============== func 23 ====================
 0x3de | 02          | size of function
 0x3df | 00          | 0 local blocks
 0x3e0 | 0b          | end
============== func 24 ====================
 0x3e1 | 02          | size of function
 0x3e2 | 00          | 0 local blocks
 0x3e3 | 0b          | end
============== func 25 ====================
 0x3e4 | 07          | size of function
 0x3e5 | 00          | 0 local blocks
 0x3e6 | 41 e8 07    | i32_const value:1000
 0x3e9 | 24 10       | global_set global_index:16
 0x3eb | 0b          | end
============== func 26 ====================
 0x3ec | 10          | size of function
 0x3ed | 01          | 1 local blocks
 0x3ee | 01 7f       | 1 locals of type I32
 0x3f0 | 41 03       | i32_const value:3
 0x3f2 | 41 04       | i32_const value:4
 0x3f4 | 10 11       | call function_index:17
 0x3f6 | 22 00       | local_tee local_index:0
 0x3f8 | 10 00       | call function_index:0
 0x3fa | 20 00       | local_get local_index:0
 0x3fc | 0b          | end
 0x3fd | 00 ca 0a    | custom section
 0x400 | 04 6e 61 6d | name: "name"
       | 65         
 0x405 | 00 0d       | module name
 0x407 | 0c 53 71 75 | "SqueakVMCore"
       | 65 61 6b 56
       | 4d 43 6f 72
       | 65         
 0x414 | 01 fe 03    | function name section
 0x417 | 1b          | 27 count
 0x418 | 00 0d 72 65 | Naming { index: 0, name: "report_result" }
       | 70 6f 72 74
       | 5f 72 65 73
       | 75 6c 74   
 0x427 | 01 15 6a 69 | Naming { index: 1, name: "jit_compile_method_js" }
       | 74 5f 63 6f
       | 6d 70 69 6c
       | 65 5f 6d 65
       | 74 68 6f 64
       | 5f 6a 73   
 0x43e | 02 0e 61 72 | Naming { index: 2, name: "array_len_byte" }
       | 72 61 79 5f
       | 6c 65 6e 5f
       | 62 79 74 65
 0x44e | 03 0e 61 72 | Naming { index: 3, name: "array_get_byte" }
       | 72 61 79 5f
       | 67 65 74 5f
       | 62 79 74 65
 0x45e | 04 10 61 72 | Naming { index: 4, name: "array_len_object" }
       | 72 61 79 5f
       | 6c 65 6e 5f
       | 6f 62 6a 65
       | 63 74      
 0x470 | 05 10 61 72 | Naming { index: 5, name: "array_get_object" }
       | 72 61 79 5f
       | 67 65 74 5f
       | 6f 62 6a 65
       | 63 74      
 0x482 | 06 10 69 73 | Naming { index: 6, name: "is_small_integer" }
       | 5f 73 6d 61
       | 6c 6c 5f 69
       | 6e 74 65 67
       | 65 72      
 0x494 | 07 17 67 65 | Naming { index: 7, name: "get_small_integer_value" }
       | 74 5f 73 6d
       | 61 6c 6c 5f
       | 69 6e 74 65
       | 67 65 72 5f
       | 76 61 6c 75
       | 65         
 0x4ad | 08 10 6e 65 | Naming { index: 8, name: "nextIdentityHash" }
       | 78 74 49 64
       | 65 6e 74 69
       | 74 79 48 61
       | 73 68      
 0x4bf | 09 0f 72 65 | Naming { index: 9, name: "register_object" }
       | 67 69 73 74
       | 65 72 5f 6f
       | 62 6a 65 63
       | 74         
 0x4d0 | 0a 10 70 75 | Naming { index: 10, name: "pushSmallInteger" }
       | 73 68 53 6d
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72      
 0x4e2 | 0b 0b 73 65 | Naming { index: 11, name: "sendMessage" }
       | 6e 64 4d 65
       | 73 73 61 67
       | 65         
 0x4ef | 0c 0e 67 65 | Naming { index: 12, name: "get_context_pc" }
       | 74 5f 63 6f
       | 6e 74 65 78
       | 74 5f 70 63
 0x4ff | 0d 0e 73 65 | Naming { index: 13, name: "set_context_pc" }
       | 74 5f 63 6f
       | 6e 74 65 78
       | 74 5f 70 63
 0x50f | 0e 12 67 65 | Naming { index: 14, name: "get_context_method" }
       | 74 5f 63 6f
       | 6e 74 65 78
       | 74 5f 6d 65
       | 74 68 6f 64
 0x523 | 0f 14 67 65 | Naming { index: 15, name: "get_method_bytecodes" }
       | 74 5f 6d 65
       | 74 68 6f 64
       | 5f 62 79 74
       | 65 63 6f 64
       | 65 73      
 0x539 | 10 1a 69 6e | Naming { index: 16, name: "increment_invocation_count" }
       | 63 72 65 6d
       | 65 6e 74 5f
       | 69 6e 76 6f
       | 63 61 74 69
       | 6f 6e 5f 63
       | 6f 75 6e 74
 0x555 | 11 0f 73 6d | Naming { index: 17, name: "smallIntegerAdd" }
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72 41 64
       | 64         
 0x566 | 12 14 73 6d | Naming { index: 18, name: "smallIntegerMultiply" }
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72 4d 75
       | 6c 74 69 70
       | 6c 79      
 0x57c | 13 09 69 6e | Naming { index: 19, name: "interpret" }
       | 74 65 72 70
       | 72 65 74   
 0x587 | 14 15 63 68 | Naming { index: 20, name: "check_jit_compilation" }
       | 65 63 6b 5f
       | 6a 69 74 5f
       | 63 6f 6d 70
       | 69 6c 61 74
       | 69 6f 6e   
 0x59e | 15 12 6a 69 | Naming { index: 21, name: "jit_compile_method" }
       | 74 5f 63 6f
       | 6d 70 69 6c
       | 65 5f 6d 65
       | 74 68 6f 64
 0x5b2 | 16 11 64 69 | Naming { index: 22, name: "dispatch_bytecode" }
       | 73 70 61 74
       | 63 68 5f 62
       | 79 74 65 63
       | 6f 64 65   
 0x5c5 | 17 16 70 75 | Naming { index: 23, name: "push_receiver_variable" }
       | 73 68 5f 72
       | 65 63 65 69
       | 76 65 72 5f
       | 76 61 72 69
       | 61 62 6c 65
 0x5dd | 18 15 70 75 | Naming { index: 24, name: "push_literal_constant" }
       | 73 68 5f 6c
       | 69 74 65 72
       | 61 6c 5f 63
       | 6f 6e 73 74
       | 61 6e 74   
 0x5f4 | 19 19 63 72 | Naming { index: 25, name: "createMinimalObjectMemory" }
       | 65 61 74 65
       | 4d 69 6e 69
       | 6d 61 6c 4f
       | 62 6a 65 63
       | 74 4d 65 6d
       | 6f 72 79   
 0x60f | 1a 04 74 65 | Naming { index: 26, name: "test" }
       | 73 74      
 0x615 | 02 da 02    | local section
 0x618 | 17          | 23 count
 0x619 | 02          | function 2 local name section
 0x61a | 01          | 1 count
 0x61b | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x622 | 03          | function 3 local name section
 0x623 | 02          | 2 count
 0x624 | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x62b | 01 05 69 6e | Naming { index: 1, name: "index" }
       | 64 65 78   
 0x632 | 04          | function 4 local name section
 0x633 | 01          | 1 count
 0x634 | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x63b | 05          | function 5 local name section
 0x63c | 02          | 2 count
 0x63d | 00 05 61 72 | Naming { index: 0, name: "array" }
       | 72 61 79   
 0x644 | 01 05 69 6e | Naming { index: 1, name: "index" }
       | 64 65 78   
 0x64b | 06          | function 6 local name section
 0x64c | 01          | 1 count
 0x64d | 00 03 6f 62 | Naming { index: 0, name: "obj" }
       | 6a         
 0x652 | 07          | function 7 local name section
 0x653 | 01          | 1 count
 0x654 | 00 03 6f 62 | Naming { index: 0, name: "obj" }
       | 6a         
 0x659 | 09          | function 9 local name section
 0x65a | 02          | 2 count
 0x65b | 00 06 6f 62 | Naming { index: 0, name: "object" }
       | 6a 65 63 74
 0x663 | 01 07 6c 61 | Naming { index: 1, name: "lastObj" }
       | 73 74 4f 62
       | 6a         
 0x66c | 0a          | function 10 local name section
 0x66d | 01          | 1 count
 0x66e | 00 05 76 61 | Naming { index: 0, name: "value" }
       | 6c 75 65   
 0x675 | 0b          | function 11 local name section
 0x676 | 02          | 2 count
 0x677 | 00 08 73 65 | Naming { index: 0, name: "selector" }
       | 6c 65 63 74
       | 6f 72      
 0x681 | 01 08 61 72 | Naming { index: 1, name: "argCount" }
       | 67 43 6f 75
       | 6e 74      
 0x68b | 0c          | function 12 local name section
 0x68c | 01          | 1 count
 0x68d | 00 07 63 6f | Naming { index: 0, name: "context" }
       | 6e 74 65 78
       | 74         
 0x696 | 0d          | function 13 local name section
 0x697 | 02          | 2 count
 0x698 | 00 07 63 6f | Naming { index: 0, name: "context" }
       | 6e 74 65 78
       | 74         
 0x6a1 | 01 02 70 63 | Naming { index: 1, name: "pc" }
 0x6a5 | 0e          | function 14 local name section
 0x6a6 | 01          | 1 count
 0x6a7 | 00 07 63 6f | Naming { index: 0, name: "context" }
       | 6e 74 65 78
       | 74         
 0x6b0 | 0f          | function 15 local name section
 0x6b1 | 01          | 1 count
 0x6b2 | 00 06 6d 65 | Naming { index: 0, name: "method" }
       | 74 68 6f 64
 0x6ba | 10          | function 16 local name section
 0x6bb | 02          | 2 count
 0x6bc | 00 06 6d 65 | Naming { index: 0, name: "method" }
       | 74 68 6f 64
 0x6c4 | 01 07 63 75 | Naming { index: 1, name: "current" }
       | 72 72 65 6e
       | 74         
 0x6cd | 11          | function 17 local name section
 0x6ce | 02          | 2 count
 0x6cf | 00 01 61    | Naming { index: 0, name: "a" }
 0x6d2 | 01 01 62    | Naming { index: 1, name: "b" }
 0x6d5 | 12          | function 18 local name section
 0x6d6 | 02          | 2 count
 0x6d7 | 00 01 61    | Naming { index: 0, name: "a" }
 0x6da | 01 01 62    | Naming { index: 1, name: "b" }
 0x6dd | 13          | function 19 local name section
 0x6de | 05          | 5 count
 0x6df | 00 07 63 6f | Naming { index: 0, name: "context" }
       | 6e 74 65 78
       | 74         
 0x6e8 | 01 06 6d 65 | Naming { index: 1, name: "method" }
       | 74 68 6f 64
 0x6f0 | 02 02 70 63 | Naming { index: 2, name: "pc" }
 0x6f4 | 03 08 62 79 | Naming { index: 3, name: "bytecode" }
       | 74 65 63 6f
       | 64 65      
 0x6fe | 04 09 62 79 | Naming { index: 4, name: "bytecodes" }
       | 74 65 63 6f
       | 64 65 73   
 0x709 | 14          | function 20 local name section
 0x70a | 03          | 3 count
 0x70b | 00 06 6d 65 | Naming { index: 0, name: "method" }
       | 74 68 6f 64
 0x713 | 01 05 63 6f | Naming { index: 1, name: "count" }
       | 75 6e 74   
 0x71a | 02 09 74 68 | Naming { index: 2, name: "threshold" }
       | 72 65 73 68
       | 6f 6c 64   
 0x725 | 15          | function 21 local name section
 0x726 | 04          | 4 count
 0x727 | 00 06 6d 65 | Naming { index: 0, name: "method" }
       | 74 68 6f 64
 0x72f | 01 09 62 79 | Naming { index: 1, name: "bytecodes" }
       | 74 65 63 6f
       | 64 65 73   
 0x73a | 02 06 6c 65 | Naming { index: 2, name: "length" }
       | 6e 67 74 68
 0x742 | 03 06 68 65 | Naming { index: 3, name: "header" }
       | 61 64 65 72
 0x74a | 16          | function 22 local name section
 0x74b | 01          | 1 count
 0x74c | 00 08 62 79 | Naming { index: 0, name: "bytecode" }
       | 74 65 63 6f
       | 64 65      
 0x756 | 17          | function 23 local name section
 0x757 | 01          | 1 count
 0x758 | 00 05 69 6e | Naming { index: 0, name: "index" }
       | 64 65 78   
 0x75f | 18          | function 24 local name section
 0x760 | 01          | 1 count
 0x761 | 00 05 69 6e | Naming { index: 0, name: "index" }
       | 64 65 78   
 0x768 | 1a          | function 26 local name section
 0x769 | 01          | 1 count
 0x76a | 00 06 72 65 | Naming { index: 0, name: "result" }
       | 73 75 6c 74
 0x772 | 03 15       | label section
 0x774 | 01          | 1 count
 0x775 | 13          | function 19 label name section
 0x776 | 01          | 1 count
 0x777 | 00 10 69 6e | Naming { index: 0, name: "interpreter_loop" }
       | 74 65 72 70
       | 72 65 74 65
       | 72 5f 6c 6f
       | 6f 70      
 0x789 | 04 6b       | type name section
 0x78b | 09          | 9 count
 0x78c | 00 0b 4f 62 | Naming { index: 0, name: "ObjectArray" }
       | 6a 65 63 74
       | 41 72 72 61
       | 79         
 0x799 | 01 09 42 79 | Naming { index: 1, name: "ByteArray" }
       | 74 65 41 72
       | 72 61 79   
 0x7a4 | 02 0c 53 71 | Naming { index: 2, name: "SqueakObject" }
       | 75 65 61 6b
       | 4f 62 6a 65
       | 63 74      
 0x7b2 | 03 0e 56 61 | Naming { index: 3, name: "VariableObject" }
       | 72 69 61 62
       | 6c 65 4f 62
       | 6a 65 63 74
 0x7c2 | 04 06 53 79 | Naming { index: 4, name: "Symbol" }
       | 6d 62 6f 6c
 0x7ca | 05 05 43 6c | Naming { index: 5, name: "Class" }
       | 61 73 73   
 0x7d1 | 06 0a 44 69 | Naming { index: 6, name: "Dictionary" }
       | 63 74 69 6f
       | 6e 61 72 79
 0x7dd | 07 0e 43 6f | Naming { index: 7, name: "CompiledMethod" }
       | 6d 70 69 6c
       | 65 64 4d 65
       | 74 68 6f 64
 0x7ed | 08 07 43 6f | Naming { index: 8, name: "Context" }
       | 6e 74 65 78
       | 74         
 0x7f6 | 07 a2 02    | global name section
 0x7f9 | 14          | 20 count
 0x7fa | 00 0b 6f 62 | Naming { index: 0, name: "objectClass" }
       | 6a 65 63 74
       | 43 6c 61 73
       | 73         
 0x807 | 01 0a 63 6c | Naming { index: 1, name: "classClass" }
       | 61 73 73 43
       | 6c 61 73 73
 0x813 | 02 0b 6d 65 | Naming { index: 2, name: "methodClass" }
       | 74 68 6f 64
       | 43 6c 61 73
       | 73         
 0x820 | 03 0c 63 6f | Naming { index: 3, name: "contextClass" }
       | 6e 74 65 78
       | 74 43 6c 61
       | 73 73      
 0x82e | 04 0b 73 79 | Naming { index: 4, name: "symbolClass" }
       | 6d 62 6f 6c
       | 43 6c 61 73
       | 73         
 0x83b | 05 11 73 6d | Naming { index: 5, name: "smallIntegerClass" }
       | 61 6c 6c 49
       | 6e 74 65 67
       | 65 72 43 6c
       | 61 73 73   
 0x84e | 06 09 6e 69 | Naming { index: 6, name: "nilObject" }
       | 6c 4f 62 6a
       | 65 63 74   
 0x859 | 07 0a 74 72 | Naming { index: 7, name: "trueObject" }
       | 75 65 4f 62
       | 6a 65 63 74
 0x865 | 08 0b 66 61 | Naming { index: 8, name: "falseObject" }
       | 6c 73 65 4f
       | 62 6a 65 63
       | 74         
 0x872 | 09 0c 70 6c | Naming { index: 9, name: "plusSelector" }
       | 75 73 53 65
       | 6c 65 63 74
       | 6f 72      
 0x880 | 0a 0d 74 69 | Naming { index: 10, name: "timesSelector" }
       | 6d 65 73 53
       | 65 6c 65 63
       | 74 6f 72   
 0x88f | 0b 0f 73 71 | Naming { index: 11, name: "squaredSelector" }
       | 75 61 72 65
       | 64 53 65 6c
       | 65 63 74 6f
       | 72         
 0x8a0 | 0c 12 72 65 | Naming { index: 12, name: "reportToJSSelector" }
       | 70 6f 72 74
       | 54 6f 4a 53
       | 53 65 6c 65
       | 63 74 6f 72
 0x8b4 | 0d 0d 61 63 | Naming { index: 13, name: "activeContext" }
       | 74 69 76 65
       | 43 6f 6e 74
       | 65 78 74   
 0x8c3 | 0e 0d 63 75 | Naming { index: 14, name: "currentMethod" }
       | 72 72 65 6e
       | 74 4d 65 74
       | 68 6f 64   
 0x8d2 | 0f 0f 63 75 | Naming { index: 15, name: "currentReceiver" }
       | 72 72 65 6e
       | 74 52 65 63
       | 65 69 76 65
       | 72         
 0x8e3 | 10 10 6e 65 | Naming { index: 16, name: "nextIdentityHash" }
       | 78 74 49 64
       | 65 6e 74 69
       | 74 79 48 61
       | 73 68      
 0x8f5 | 11 0b 66 69 | Naming { index: 17, name: "firstObject" }
       | 72 73 74 4f
       | 62 6a 65 63
       | 74         
 0x902 | 12 0a 6c 61 | Naming { index: 18, name: "lastObject" }
       | 73 74 4f 62
       | 6a 65 63 74
 0x90e | 13 0b 6f 62 | Naming { index: 19, name: "objectCount" }
       | 6a 65 63 74
       | 43 6f 75 6e
       | 74         
 0x91b | 0b 2d       | tag name section
 0x91d | 03          | 3 count
 0x91e | 00 06 52 65 | Naming { index: 0, name: "Return" }
       | 74 75 72 6e
 0x926 | 01 0f 50 72 | Naming { index: 1, name: "PrimitiveFailed" }
       | 69 6d 69 74
       | 69 76 65 46
       | 61 69 6c 65
       | 64         
 0x937 | 02 11 44 6f | Naming { index: 2, name: "DoesNotUnderstand" }
       | 65 73 4e 6f
       | 74 55 6e 64
       | 65 72 73 74
       | 61 6e 64   
